#include !\TTSCarcassonne\scripts\control_panel_common

local LANGUAGE_ICONS = {['en-US'] = "UK/US Flag", ['nl-NL'] = "NL Flag", ['zh-TW'] = "TW Flag"}

local EASY_AI_COLOR = {r=0.5,g=1.0,b=0.5}
local HARD_AI_COLOR = {r=1,g=0.3,b=0.3}

local HOTSEAT_ROW = 7.3
local ROW_1 = 3.7
local ROW_2 = 1.65
local ROW_3 = -0.35
local ROW_4 = -2.4
local ROW_5 = -4.45
local ROW_6 = -6.5
local ROW_7 = -8.55
local ROW_8 = -10.6
local STARTING_TILE_COLUMN = 8.0
local COLUMN_1 = 6.4
local COLUMN_2 = 3.8
local COLUMN_3 = 1.2
local COLUMN_4 = -1.4
local COLUMN_5 = -4.0
local COLUMN_6 = -6.6

--Runs whenever game is saved/autosaved
function onSave()
    local data_to_save = {rt=dropDownToggle}
    saved_data = JSON.encode(data_to_save)
    --saved_data = "" --Remove -- at start + save to clear save data
    return saved_data
end

function onLoad(saved_data)
    --Loads the tracking for if the game has started yet
    --This recalls the state of the "toggle"
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        dropDownToggle = loaded_data.rt
    else
        dropDownToggle = false
    end
    Timer.create({identifier='' .. os.clock(), function_name='initializeControlPanelPage', function_owner=nil, parameters=nil, delay=0.0001})
end

function initializeControlPanelPage()
    btnIDs = {}
    index = 0
    --This hides the roll buttons on launch if the tool was toggled off
    if dropDownToggle then
        self.UI.setAttribute("dropDownList", "active", true)
    end

    --WORK-AROUND: icons are not displayed correctly for UIs on objects. Bug here: http://www.berserk-games.com/forums/showthread.php?5239-UI-Issues&p=22632#post22632
    --work-around is to set the icon again in onLoad()
    local currentLanguage = Global.call('getControlPanelState', {key = 'currentLanguage'})
    localizeUI(currentLanguage)
    self.UI.setAttribute("currentLanguageButton", "icon", LANGUAGE_ICONS[currentLanguage])
    self.UI.setAttribute("en-US", "icon", "UK/US Flag")
    self.UI.setAttribute("zh-TW", "icon", "TW Flag")
    self.UI.setAttribute("nl-NL", "icon", "NL Flag")

    self.UI.setAttribute("AI/Hotseat", "text", translate("AI/Hotseat (H)"))
    self.UI.setAttribute("Green", "text", translate("Green"))
    self.UI.setAttribute("Purple", "text", translate("Purple"))
    self.UI.setAttribute("White", "text", translate("White"))
    self.UI.setAttribute("Blue", "text", translate("Blue"))
    self.UI.setAttribute("Red", "text", translate("Red"))
    self.UI.setAttribute("Pink", "text", translate("Pink"))
    self.UI.setAttribute("Starting Tiles", "text", translate("Starting Tiles"))
    self.UI.setAttribute("Base Starting Tile", "text", translate("LABEL_BASE_STARTING_TILE"))
    self.UI.setAttribute("The River", "text", translate("LABEL_THE_RIVER"))
    self.UI.setAttribute("The River II", "text", translate("LABEL_THE_RIVER_II"))
    self.UI.setAttribute("The River (Big Box 5)", "text", translate("LABEL_THE_RIVER_BIG_BOX_5"))
    self.UI.setAttribute("City of Carcassonne", "text", translate("LABEL_CITY_OF_CARCASSONNE"))
    self.UI.setAttribute("Wheel of Fortune", "text", translate("LABEL_WHEEL_OF_FORTUNE"))
    self.UI.setAttribute("School", "text", translate("LABEL_SCHOOL"))
    self.UI.setAttribute("Wind Roses", "text", translate("LABEL_WIND_ROSES"))
    self.UI.setAttribute("NextPageLabel", "text", translate("LABEL_NEXT_PAGE"))
    --Hot seats
    initializeHotseatButton(COLUMN_1, HOTSEAT_ROW, 'Green')
    initializeHotseatButton(COLUMN_2, HOTSEAT_ROW, 'Purple')
    initializeHotseatButton(COLUMN_3, HOTSEAT_ROW, 'White')
    initializeHotseatButton(COLUMN_4, HOTSEAT_ROW, 'Blue')
    initializeHotseatButton(COLUMN_5, HOTSEAT_ROW, 'Red')
    initializeHotseatButton(COLUMN_6, HOTSEAT_ROW, 'Pink')
    --Starting tiles
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_1, 'StartingTileBase', translate("TOOLTIP_BASE_STARTING_TILE"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_2, 'StartingTileRiver', translate("TOOLTIP_RIVER"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_3, 'StartingTileRiverII', translate("TOOLTIP_RIVER_II"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_4, 'StartingTileRiverBB5', translate("TOOLTIP_RIVER_BB5"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_5, 'StartingTileCoC', translate("TOOLTIP_CITY_OF_CARCASSONNE"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_6, 'StartingTileWoF', translate("TOOLTIP_WHEEL_OF_FORTUNE"))
    initializeCheckbox(STARTING_TILE_COLUMN, ROW_7, 'StartingTileSchool', translate("TOOLTIP_SCHOOL"))
end

function localizeUI(language)
    if language == 'nl-NL' then
        self.UI.setAttribute("AI/Hotseat", "fontSize", 64)
        self.UI.setAttribute("NextPageLabel", "width", 310)
    end
end

function selectedLanguage(sPlayer, option, id)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer.color}) == false then return end
    self.UI.setAttribute("dropDownList", "active", false)
    self.UI.hide("dropDownList")
    Global.call('setControlPanelState', {key = 'currentLanguage', value = id})
    Global.call('languageChanged')
    self.UI.setAttribute("currentLanguageButton", "icon", LANGUAGE_ICONS[id])
    dropDownToggle = false
    self.clearButtons()
    initializeControlPanelPage()
end

--This toggles showing or hiding the roll buttons
function toggleDropDown(sPlayer, option, id)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer.color}) == false then return end
    if not dropDownToggle then
        self.UI.setAttribute("dropDownList", "active", true)
        self.UI.show("dropDownList")
    else
        self.UI.setAttribute("dropDownList", "active", false)
        self.UI.hide("dropDownList")
    end
    dropDownToggle = not dropDownToggle
end

function initializeHotseatButton(x, z, color)
    if Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
        local hotseatOwner = Global.call('getControlPanelState', {key = color .. 'Control'})
        if hotseatOwner:sub(1,2) == 'AI' then
            if hotseatOwner == 'AIEasy' then
                button_parameters.color = EASY_AI_COLOR
            else
                button_parameters.color = HARD_AI_COLOR
            end
            button_parameters.label = 'AI'
        else
            button_parameters.label = hotseatOwner:sub(1,1)
            button_parameters.color = stringColorToRGB(hotseatOwner)
        end
        button_parameters.tooltip = translate("TOOLTIP_AI_HOTSEAT_TOGGLE")
    elseif (not Global.call('gameIsActive', {}) and Player[color].seated) or table.contains(Global.getTable('activePlayers'), color) then
        button_parameters.label = 'X'
        button_parameters.tooltip = Player[color].steam_name
        button_parameters.color = stringColorToRGB(color)
    else
        button_parameters.label = ''
        button_parameters.tooltip = translate("TOOLTIP_AI_HOTSEAT_TOGGLE")
        button_parameters.color = WHITE_COLOR
    end
    button_parameters.click_function = 'on' .. color .. 'HotseatPressed'
    button_parameters.position = {x, BUTTON_HEIGHT, z}
    self.createButton( button_parameters )
    btnIDs['btn' .. color .. 'HotseatButton'] = index
    index = index + 1
end

function onHotseatButtonPressed(sPlayer, color_pressed, data_key, button_key)
    if Global.call('checkAdminPrivileges', {sColor = sPlayer}) == false then return end
    local numPlayersChanged = false
    if Player[color_pressed].seated then
        printToColor(translate("MESSAGE_SEAT_OCCUPIED"), sPlayer, ERROR_COLOR)
        return
    end
    local currentPlayerControl = Global.call('getControlPanelState', {key = data_key})
    local passedCurrentPlayerControl = false
    if currentPlayerControl == nil or currentPlayerControl == 'AIEasy' then
        local newDifficulty
        local background_color
        if currentPlayerControl == nil then
            newDifficulty = 'Easy'
            background_color = EASY_AI_COLOR
        else
            newDifficulty = 'Hard (Beta)'
            background_color = HARD_AI_COLOR
        end
        Global.call('setControlPanelState', {key = data_key, value = 'AI' .. newDifficulty})
        allGameMessage({"MESSAGE_SEAT_ASSIGNED_TO_AI", {'{c1}', translate(color_pressed)}, {'{s1}', translate(newDifficulty)}}, stringColorToRGB(color_pressed), nil)
        self.editButton({index = btnIDs[button_key], label = 'AI', color = background_color})
        numPlayersChanged = true
    else
        if currentPlayerControl == 'AIHard (Beta)' then
            passedCurrentPlayerControl = true
        end
        for i, color in ipairs(PLAYER_COLORS) do
            if color == currentPlayerControl then
                passedCurrentPlayerControl = true
            elseif passedCurrentPlayerControl and (Player[color].seated or i == #PLAYER_COLORS) then
                if Player[color].seated then
                    Global.call('setControlPanelState', {key = data_key, value = color})
                    allGameMessage({"MESSAGE_SEAT_ASSIGNED_TO_HOTSEAT", {'{c1}', translate(color_pressed)}, {'{p1}', stringToBracketedHex(color) .. Player[color].steam_name}}, stringColorToRGB(color_pressed), color)
                    self.editButton({index = btnIDs[button_key], label = 'H', color = stringColorToRGB(color)})
                else
                    Global.call('setControlPanelState', {key = data_key, value = nil})
                    allGameMessage({"MESSAGE_HOTSEAT_REMOVED", {'{c1}', translate(color_pressed)}}, NEUTRAL_COLOR)
                    self.editButton({index = btnIDs[button_key], label = '', color=WHITE_COLOR})
                    numPlayersChanged = true
                end
                break
            end
        end
    end

    if Global.call('gameIsActive', {}) then
        if Global.call('getControlPanelState', {key = data_key}) ~= nil and color_pressed == Global.getVar('activePlayers')[Global.getVar('currentPlayer')] and Global.getVar('turnState') == 'begin turn' then -- if the current player was stuck at the beginning of the turn, allow them to proceed
            return Timer.create({identifier=os.clock(), function_name='currentPlayerControllerChanged', function_owner=Global, parameters={currentPlayer=color_pressed, newCurrentPlayerControl=Global.call('getControlPanelState', {key = color_pressed .. 'Control'})}, delay=2})
        end
        return --don't change tower/bridge/castle numbers after the game has already started
    end

    if numPlayersChanged then
        local numPlayers = 0
        for _, color in ipairs(PLAYER_COLORS) do
            if Player[color].seated or Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
                numPlayers = numPlayers + 1
            end
        end
        local newNumTowers = NUM_TOWERS_PER_PLAYER[numPlayers]
        if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
            allGameMessage({"MESSAGE_TOWER_COUNT_CHANGED", {'{n1}', newNumTowers}}, NEUTRAL_COLOR, nil)
        end
        Global.call('setControlPanelState', {key = 'TowerNumTowers', value = newNumTowers})
        local newNumBridges = NUM_BRIDGES_PER_PLAYER[numPlayers]
        if newNumBridges ~= Global.call('getControlPanelState', {key = 'BCnBNumBridges'}) and Global.call('getControlPanelState', {key = 'BCnBBridges'}) then
            allGameMessage({"MESSAGE_BRIDGE_COUNT_CHANGED", {'{n1}', newNumBridges}}, NEUTRAL_COLOR, nil)
        end
        Global.call('setControlPanelState', {key = 'BCnBNumBridges', value = newNumBridges})
        local newNumCastles = NUM_CASTLES_PER_PLAYER[numPlayers]
        if newNumBridges ~= Global.call('getControlPanelState', {key = 'BCnBNumCastles'}) and Global.call('getControlPanelState', {key = 'BCnBCastles'}) then
            allGameMessage({"MESSAGE_CASTLE_COUNT_CHANGED", {'{n1}', newNumCastles}}, NEUTRAL_COLOR, nil)
        end
        Global.call('setControlPanelState', {key = 'BCnBNumCastles', value = newNumCastles})
    end
end

-- This should be called after the global onPlayerChangedColor is called, and it appears to do so when tested. Otherwise, the incorrect data will be displayed
function onPlayerChangedColor(player)
    for _, color in ipairs(PLAYER_COLORS) do
        if Player[color] ~= nil and Player[color].seated then
            self.editButton({index = btnIDs['btn' .. color .. 'HotseatButton'], label = 'X', tooltip = Player[color].steam_name, color=stringColorToRGB(color)})
        elseif Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
            if Global.call('getControlPanelState', {key = color .. 'Control'}):sub(1,2) == 'AI' then
                self.editButton({index = btnIDs['btn' .. color .. 'HotseatButton'], label = 'AI', tooltip = translate("TOOLTIP_AI_HOTSEAT_TOGGLE")})
            else
                local player = Global.call('getControlPanelState', {key = color .. 'Control'})
                self.editButton({index = btnIDs['btn' .. color .. 'HotseatButton'], label = player:sub(1,1), tooltip = translate("TOOLTIP_AI_HOTSEAT_TOGGLE"), color = stringColorToRGB(player)})
            end
        else
            self.editButton({index = btnIDs['btn' .. color .. 'HotseatButton'], label = '', tooltip = translate("TOOLTIP_AI_HOTSEAT_TOGGLE"), color=WHITE_COLOR})
        end
    end
end

function onStartingCheckboxToggle(sPlayer, data_key)
    local button_key = getCheckboxButtonKey(data_key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = data_key}) then
        Global.call('setControlPanelState', {key = data_key, value = false})
        self.editButton({index = btnIDs[button_key], label = ''})
    else
        Global.call('setControlPanelState', {key = data_key, value = true})
        self.editButton({index = btnIDs[button_key], label = 'X'})

        --Check for incompatibilities and remove any previously selected imcompatible starting tiles
        local starting_tile = incompatibleStartingCombinations[data_key]
        if starting_tile ~= nil then
          for _, setting_key in ipairs(starting_tile.incompatibleList) do
              if Global.call('getControlPanelState', {key = setting_key}) then
                Global.call('setControlPanelState', {key = setting_key, value = false})
                self.editButton({index = btnIDs[getCheckboxButtonKey(setting_key)], label = ''})
                local starting_tile_name = translate(starting_tile.label)
                local remove_tile_name = translate(incompatibleStartingCombinations[setting_key].label)
                printToColor(translate({"MESSAGE_STARTING_TILE_REMOVED", {'{s1}', starting_tile_name}, {'{s2}', remove_tile_name}}), sPlayer, ERROR_COLOR)
              end
          end
        end
    end
end

function onGreenHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'Green', 'GreenControl', 'btnGreenHotseatButton')
end

function onPurpleHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'Purple', 'PurpleControl', 'btnPurpleHotseatButton')
end

function onWhiteHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'White', 'WhiteControl', 'btnWhiteHotseatButton')
end

function onBlueHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'Blue', 'BlueControl', 'btnBlueHotseatButton')
end

function onRedHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'Red', 'RedControl', 'btnRedHotseatButton')
end

function onPinkHotseatPressed(object, sPlayer)
    onHotseatButtonPressed(sPlayer, 'Pink', 'PinkControl', 'btnPinkHotseatButton')
end

function onStartingTileBaseToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileBase')
end

function onStartingTileRiverToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileRiver')
end

function onStartingTileRiverIIToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileRiverII')
end

function onStartingTileRiverBB5Toggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileRiverBB5')
end

function onStartingTileCoCToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileCoC')
end

function onStartingTileWoFToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileWoF')
end

function onStartingTileSchoolToggle(Object, sPlayer)
    onStartingCheckboxToggle(sPlayer, 'StartingTileSchool')
end
