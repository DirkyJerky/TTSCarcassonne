local debugLevel = 0

function getDebugLevel()
    return debugLevel
end

function setDebugLevel(params)
    debugLevel = params.newDebugLevel
end

function debugShowTraversal()
    for xIndex, gridColumn in pairs(traversedFeaturePositions) do
        for zIndex, tileLocation in pairs(gridColumn) do
            for position, traversedFeaturePosition in pairs(tileLocation) do
                if position < 13 or getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)).specialFeatures[position - 12][3] ~= nil then
                    local tile = getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)
                    local rotation = tileGrid[xIndex][zIndex].rotation
                    local x, z = getTileFeatureLocation(position, tile, rotation)
                    if traversedFeaturePosition ~= 2 then
                        local params = {}
                        if traversedFeaturePosition == 1 then
                            params.type = "BlockSquare"
                        elseif traversedFeaturePosition == 2 then
                            params.type = "BlockTriangle"
                        end
                        params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, 1.5, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                        params.scale = {0.25, 0.25, 0.25}
                        params.callback = "identifyFeature"
                        params.sound = false
                        local newObject = spawnObject(params)
                        table.insert(featureMarkers, newObject)
                    end
                end
            end
        end
    end
    for xIndex, gridColumn in pairs(traversedGrid) do
        for zIndex, tileLocation in pairs(gridColumn) do
            for position, traversedPosition in pairs(tileLocation) do
                if position < 13 or getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)).specialFeatures[position - 12][3] ~= nil then
                    local tile = getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)
                    local rotation = tileGrid[xIndex][zIndex].rotation
                    local x, z = getTileFeatureLocation(position, tile, rotation)
                    local params = {}
                    if traversedPosition ~= nil and (traversedFeaturePositions[xIndex] == nil or traversedFeaturePositions[xIndex][zIndex] == nil or traversedFeaturePositions[xIndex][zIndex][position] == nil or traversedFeaturePositions[xIndex][zIndex][position] == 2) then
                        params.type = "BlockRectangle"
                    end
                    params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, 1.5, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                    params.scale = {0.25, 0.25, 0.25}
                    params.callback = "identifyFeature"
                    params.sound = false
                    local newObject = spawnObject(params)
                    table.insert(featureMarkers, newObject)
                end
            end
        end
    end
    Timer.create({identifier=os.clock(), function_name='deleteMarkers', function_owner=nil, parameters=nil, delay=8})
end

function debugShowFeatureMap()
    --this will break if the starting tile is moved
    local minX = MIDDLE_X_OFFSET
    local maxX = MIDDLE_X_OFFSET
    local minZ = MIDDLE_Z_OFFSET
    local maxZ = MIDDLE_Z_OFFSET
    local chatWindowMaxWidth
    if featureIndex < 100 then
        chatWindowMaxWidth = 11
    else
        chatWindowMaxWidth = 6
    end

    for xIndex, gridColumn in pairs(tileGrid) do
        --sometimes a gridColumn might not be nil even when it has no columns. This can happen due to AI temporarily using a grid location in that column, or by removing a tile. Make sure a real column exists.
        local hasColumn = false
        for zIndex, tileLocation in pairs(gridColumn) do
            hasColumn = true
        end
        if hasColumn then
            if xIndex < minX then minX = xIndex end
            if xIndex > maxX then maxX = xIndex end
            for zIndex, tileLocation in pairs(gridColumn) do
                if zIndex < minZ then minZ = zIndex end
                if zIndex > maxZ then maxZ = zIndex end
            end
        end
    end

    local printColumnMinX = minX
    for printColumnMaxX = minX + chatWindowMaxWidth, maxX + chatWindowMaxWidth, chatWindowMaxWidth + 1 do
        if printColumnMaxX > maxX then printColumnMaxX = maxX end
        log("\nprinting feature map x:" .. printColumnMinX .. "-" .. printColumnMaxX .. " z:" .. minZ .. "-" .. maxZ .. "\n")
        for zIndex=maxZ, minZ, -1 do
            for i, positionRow in ipairs({{99, 5, 1, 6, 99}, {12, 99, 99, 99, 7}, {4, 99, 99, 99, 2}, {11, 99, 99, 99, 8}, {99, 10, 3, 9, 99}}) do
                local printLine = ""
                for xIndex=printColumnMinX, printColumnMaxX do
                    if tileGrid[xIndex] ~= nil then
                        if tileGrid[xIndex][zIndex] ~= nil then
                            local tilePositionRow = table.shallow_copy(positionRow)
                            if i >= 2 and i <= 4 then
                                for j=2, 4 do
                                    local closestFeatureMapPosition = findClosestPosition(xIndex, zIndex, (j - 3) * 0.25, (3 - i) * 0.25)
                                    if closestFeatureMapPosition > 12 then
                                        tilePositionRow[j] = closestFeatureMapPosition
                                    end
                                end
                            end
                            for _, position in ipairs(tilePositionRow) do
                                if position == 99 then
                                    if featureIndex < 100 then
                                        printLine = printLine .. '  '
                                    else
                                        printLine = printLine .. '   '
                                    end
                                else
                                    local featureNum = getFeatureNumAt(xIndex, zIndex, position)
                                    if featureNum == nil then
                                        --no feature found at this position. This can be possible due to ignoredFeatures on the tile (ie. City of Carcassonne) or from tiles where the middle is not valid (ie. Some Hills & Sheep tiles)
                                        if featureIndex < 100 then
                                            featureNum = 'XX'
                                        else
                                            featureNum = 'XXX'
                                        end
                                    else
                                        featureNum = tonumber(featureNum)
                                        if featureIndex < 100 then
                                            if featureNum < 10 then featureNum = '0' .. featureNum end
                                        else
                                            if featureNum < 10 then featureNum = '00' .. featureNum elseif featureNum < 100 then featureNum = '0' .. featureNum end
                                        end
                                    end
                                    printLine = printLine .. featureNum
                                end
                            end
                        else
                            if featureIndex < 100 then
                                printLine = printLine .. '          '
                            else
                                printLine = printLine .. '               '
                            end
                        end
                    end
                end
                log(printLine)
            end
        end
        printColumnMinX = printColumnMinX + chatWindowMaxWidth + 1
    end
    log("printing features...")
    for featureKey, feature in pairs(featureList) do
        local specialFeatures = ""
        for i, specialFeature in ipairs(feature.specialFeatures) do
            specialFeatures = specialFeatures .. specialFeature
            if i ~= #feature.specialFeatures then
                specialFeatures = specialFeatures .. ", "
            end
        end
        local numFeatureOpenings = feature.numOpenings
        local featureOpenings = ""
        for key, _ in pairs(feature.openingCoords) do
            featureOpenings = featureOpenings .. key .. ", "
        end
        featureOpenings = featureOpenings:sub(1, -3) --get rid of the last comma and space
        -- if feature.nameOfFeature ~= 'Road' and feature.nameOfFeature ~= 'River' and not table.contains(PROXIMITY_FEATURES, feature.nameOfFeature) then numFeatureOpenings = numFeatureOpenings / 2 end
        featureKey = "" .. tonumber(featureKey)
        log(featureKey .. " (" .. feature.nameOfFeature .. "): has " .. feature.numTiles .. " tiles and " .. numFeatureOpenings .. " numOpenings: " .. featureOpenings .. " Special Features: " .. specialFeatures)
    end
    log("printing links...")
    for linkType, originFeatures in pairs(linkedFeatures) do
        local printLine = linkType .. ": "
        local first = true
        for origin, destinationFeatures in pairs(originFeatures) do
            origin = tonumber(origin)
            local nestedFirst = true
            if not first then printLine = printLine .. "; " end
            first = false
            printLine = printLine .. origin .. " - "
            for destination, _ in pairs(destinationFeatures) do
                destination = tonumber(destination)
                if not nestedFirst then printLine = printLine .. ", " end
                nestedFirst = false
                printLine = printLine .. destination
            end
        end
        log(printLine)
    end
end

--show markers at the specified featureNum
function debugIdentifyFeature(object, player_color, input, stillTyping)
    if stillTyping then return end
    inputAsNumber = tonumber(input)
    if inputAsNumber == nil then return end
    locationMarkers = {}
    for xIndex, gridColumn in pairs(tileGrid) do
        for zIndex, tileLocation in pairs(gridColumn) do
            local positionsToVisit = {}
            local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid))
            local specialFeatures = tileData.specialFeatures
            if specialFeatures ~= nil then
                for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                    if specialFeature[3] ~= nil then
                        table.insert(positionsToVisit, specialFeatureNum+12)
                    end
                end
            end
            for featureMapPosition=1, 12 do
                table.insert(positionsToVisit, featureMapPosition)
            end

            for _, featureMapPosition in ipairs(positionsToVisit) do
                local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
                if featureNum ~= nil and featureNum == input then
                    --setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                    local x, z = getFeatureLocation(xIndex, zIndex, featureMapPosition)
                    if x ~= nil and z ~= nil then
                        local tileHeight = TILE_THICKNESS
                        local specialFeatures = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)).specialFeatures
                        if specialFeatures ~= nil then
                            for _, specialFeature in ipairs(specialFeatures) do
                                if specialFeature[1] == "Hill" then
                                    tileHeight = TILE_THICKNESS * 2
                                end
                            end
                        end
                        local tile = getObjectFromGUID(tileLocation.tile_guid)
                        local rotation = tileLocation.rotation
                        local params = {}
                        params.type = "BlockSquare"
                        params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, TABLE_SURFACE_Y + tileHeight, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                        params.scale = {0.25, 0.25, 0.25}
                        params.callback = "identifyFeature"
                        params.sound = false
                        local newObject = spawnObject(params)
                        table.insert(featureMarkers, newObject)
                    end
                end
            end
        end
    end
    Timer.create({identifier=os.clock(), function_name='deleteMarkers', function_owner=nil, parameters=nil, delay=FIGURE_PRAISE_DELAY})
end

function debugShowTileOdds()
    log("printing connection odds...")
    for openingCoord, tileOdds in pairs(tileConnectionOdds) do --iterate through all valid tile lists and remove the added tile
        local printLine = openingCoord .. ": "
        for key, numChances in pairs(tileOdds) do
            printLine = printLine .. key .. ":" .. numChances .. ", "
        end
        printLine = printLine:sub(1, -3) --get rid of the last comma and space
        log(printLine)
    end
end
