#include !\TTSCarcassonne\scripts\control_panel_common

local ROW_1 = 5.3
local ROW_2 = 1.1
local ROW_3 = -2.95
local ROW_4 = -7.0
local ROW_5 = -11.15
local COLUMN_1 = 7.9
local COLUMN_2 = 6.25
local COLUMN_3 = 2.95
local COLUMN_4 = -0.4
local COLUMN_5 = -3.75
local COLUMN_6 = -7.1

-- Names of the checkboxes that will trigger multiple other checkboxes (typically all in an expansion set) to be checked
local AllCheckboxButtonGroups = {
  ["AnMAll"] = {'AnMTiles', 'AnMAbbey', 'AnMMayor', 'AnMWagon', 'AnMBarn'},
  ["CKnRAll"] = {'KnRBTiles', 'StartingTileCoC', 'KnRBKing', 'KnRBRobber', 'CultTiles'},
  ["CatapultAll"] = {'CatapultTiles', 'CatapultKnockOut', 'CatapultSeduction', 'CatapultTarget', 'CatapultCatch'},
  ["BCnBAll"] = {'BCnBTiles', 'BCnBBridges', 'BCnBCastles', 'BCnBBazaars'},
  ["HnSAll"] = {'HnSTiles', 'HnSShepherd', 'HnSHills', 'HnSVineyards'}
}

numPlayers = 1

function onLoad()
    Timer.create({identifier='' .. os.clock(), function_name='initializeControlPanelPage', function_owner=nil, parameters=nil, delay=0.0001})
end

function initializeControlPanelPage()
    localizeUI(Global.call('getControlPanelState', {key = 'currentLanguage'}))
    self.UI.setAttribute("AnMExpansionLabel", "text", "5. " .. translate("Abbey & Mayor"))
    self.UI.setAttribute("AnMTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("AnMAbbeyLabel", "text", translate("Abbey"))
    self.UI.setAttribute("AnMMayorLabel", "text", translate("Mayor"))
    self.UI.setAttribute("AnMWagonLabel", "text", translate("Wagon"))
    self.UI.setAttribute("AnMBarnLabel", "text", translate("Barn"))
    self.UI.setAttribute("CKnRExpansionLabel", "text", "6. " .. translate("Count, King, & Robber"))
    self.UI.setAttribute("KnRBTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("StartingTileCoCLabel", "text", translate("City"))
    self.UI.setAttribute("KnRBKingLabel", "text", translate("King"))
    self.UI.setAttribute("KnRBRobberBaronLabel", "text", translate("LABEL_ROBBER_BARON_SHORT_NAME"))
    self.UI.setAttribute("CultTilesLabel", "text", translate("Shrines"))
    self.UI.setAttribute("CatapultExpansionLabel", "text", "7. " .. translate("The Catapult"))
    self.UI.setAttribute("CatapultTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("CatapultKnockOutLabel", "text", translate("Knock Out"))
    self.UI.setAttribute("CatapultSeductionLabel", "text", translate("Seduction"))
    self.UI.setAttribute("CatapultTargetLabel", "text", translate("Target"))
    self.UI.setAttribute("CatapultCatchLabel", "text", translate("Catch"))
    self.UI.setAttribute("BCnBExpansionLabel", "text", "8. " .. translate("Bridges, Castles, & Bazaars"))
    self.UI.setAttribute("BCnBTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("BCnBBridgesLabel", "text", translate("Bridges"))
    self.UI.setAttribute("BCnBCastlesLabel", "text", translate("Castles"))
    self.UI.setAttribute("BCnBBazaarsLabel", "text", translate("Bazaars"))
    self.UI.setAttribute("HnSExpansionLabel", "text", "9. " .. translate("Hills & Sheep"))
    self.UI.setAttribute("HnSTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("HnSShepherdLabel", "text", translate("Shepherd"))
    self.UI.setAttribute("HnSHillsLabel", "text", translate("Hills"))
    self.UI.setAttribute("HnSVineyardsLabel", "text", translate("Vineyards"))
    self.UI.setAttribute("PreviousPageLabel", "text", translate("LABEL_PREVIOUS_PAGE"))
    self.UI.setAttribute("NextPageLabel", "text", translate("LABEL_NEXT_PAGE"))

--Abbey & Mayor
    initializeAllCheckbox(COLUMN_1, ROW_1, 'AnMAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_1, 'AnMTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 12}}))
    initializeCheckbox(COLUMN_3, ROW_1, 'AnMAbbey', translate("TOOLTIP_ABBEY"))
    initializeCheckbox(COLUMN_4, ROW_1, 'AnMMayor', translate("TOOLTIP_MAYOR"))
    initializeCheckbox(COLUMN_5, ROW_1, 'AnMWagon', translate("TOOLTIP_WAGON"))
    initializeCheckbox(COLUMN_6, ROW_1, 'AnMBarn', translate("TOOLTIP_BARN"))

--Count, King, and Robber
    initializeAllCheckbox(COLUMN_1, ROW_2, 'CKnRAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_2, 'KnRBTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 5}}))
    initializeCheckbox(COLUMN_3, ROW_2, 'StartingTileCoC', translate("The City of Carcassonne starting tiles. Whenever you place a tile that scores points for others, you can store a follower here. These followers can be snuck into features after they are finished, but before they are scored."))
    initializeCheckbox(COLUMN_4, ROW_2, 'KnRBKing', translate("TOOLTIP_KING"))
    initializeCheckbox(COLUMN_5, ROW_2, 'KnRBRobber', translate("TOOLTIP_ROBBER_BARON"))
    initializeCheckbox(COLUMN_6, ROW_2, 'CultTiles', translate("TOOLTIP_SHRINE"))

--The Catapult
    -- initializeAllCheckbox(COLUMN_1, ROW_3, 'CatapultAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_3, 'CatapultTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 12}}))
    -- initializeCheckbox(COLUMN_3, ROW_3, 'CatapultKnockOut', nil)
    -- initializeCheckbox(COLUMN_4, ROW_3, 'CatapultSeduction', nil)
    -- initializeCheckbox(COLUMN_5, ROW_3, 'CatapultTarget', nil)
    -- initializeCheckbox(COLUMN_6, ROW_3, 'CatapultCatch', nil)

--Bridges, Castles, and Bazaars
    -- initializeAllCheckbox(COLUMN_1, ROW_4, 'BCnBAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_4, 'BCnBTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 12}}))

    -- --Bridges
    -- initializeCounter('BCnBBridges', COLUMN_3, BUTTON_HEIGHT, ROW_4, "TOOLTIP_BRIDGES", 'BCnBNumBridges')

    -- --Castles
    -- initializeCounter('BCnBCastles', COLUMN_4, BUTTON_HEIGHT, ROW_4, "TOOLTIP_CASTLES", 'BCnBNumCastles')
    -- initializeCheckbox(COLUMN_4, ROW_4, 'BCnBCastles', nil)
    -- initializeCheckbox(COLUMN_5, ROW_4, 'BCnBBazaars', nil)

--Hills & Sheep
    initializeAllCheckbox(COLUMN_1, ROW_5, 'HnSAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_5, 'HnSTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 18}}))
    initializeCheckbox(COLUMN_3, ROW_5, 'HnSShepherd', translate("TOOLTIP_SHEPHERD"))
    initializeCheckbox(COLUMN_4, ROW_5, 'HnSHills', translate("TOOLTIP_HILL"))
    initializeCheckbox(COLUMN_5, ROW_5, 'HnSVineyards', translate("TOOLTIP_VINEYARD"))
end

function localizeUI(language)
    if language == 'nl-NL' then
        --ControlPanelExpansionLabel
        self.UI.setAttribute("AnMExpansionLabel", "fontSize", 48)
        self.UI.setAttribute("CKnRExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("CatapultExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("BCnBExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("HnSExpansionLabel", "fontSize", 56)
        --ControlPanelItemLabel
        self.UI.setAttribute("AnMTilesLabel", "fontSize", 40)
        self.UI.setAttribute("AnMAbbeyLabel", "fontSize", 40)
        self.UI.setAttribute("AnMMayorLabel", "fontSize", 40)
        self.UI.setAttribute("AnMWagonLabel", "fontSize", 40)
        self.UI.setAttribute("AnMBarnLabel", "fontSize", 40)
        self.UI.setAttribute("KnRBTilesLabel", "fontSize", 40)
        self.UI.setAttribute("StartingTileCoCLabel", "fontSize", 40)
        self.UI.setAttribute("KnRBKingLabel", "fontSize", 40)
        self.UI.setAttribute("KnRBRobberBaronLabel", "fontSize", 40)
        self.UI.setAttribute("CultTilesLabel", "fontSize", 40)
        self.UI.setAttribute("CatapultTilesLabel", "fontSize", 40)
        self.UI.setAttribute("CatapultKnockOutLabel", "fontSize", 40)
        self.UI.setAttribute("CatapultSeductionLabel", "fontSize", 40)
        self.UI.setAttribute("CatapultTargetLabel", "fontSize", 40)
        self.UI.setAttribute("CatapultCatchLabel", "fontSize", 40)
        self.UI.setAttribute("BCnBTilesLabel", "fontSize", 40)
        self.UI.setAttribute("BCnBBridgesLabel", "fontSize", 40)
        self.UI.setAttribute("BCnBCastlesLabel", "fontSize", 40)
        self.UI.setAttribute("BCnBBazaarsLabel", "fontSize", 40)
        self.UI.setAttribute("HnSTilesLabel", "fontSize", 40)
        self.UI.setAttribute("HnSShepherdLabel", "fontSize", 40)
        self.UI.setAttribute("HnSHillsLabel", "fontSize", 40)
        self.UI.setAttribute("HnSVineyardsLabel", "fontSize", 40)
        --ControlPanelPageLabel
        self.UI.setAttribute("NextPageLabel", "width", 310)
    end
end

function onAllButtonToggle(sPlayer, key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local buttonGroup = AllCheckboxButtonGroups[key]
    if buttonGroup == nil then
      return
    end
    local button_key = getCheckboxButtonKey(key)
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = key}) then
            allChecked = false
        end
    end
    local label
    local value
    if allChecked then
        label = ''
        value = false
    else
        label = 'X'
        value = true
    end
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if key == 'BCnBBridges' then
            setCheckboxCounter('BCnBBridges', 'BCnBNumBridges')
        elseif key == 'BCnBCastles' then
            setCheckboxCounter('BCnBCastles', 'BCnBNumCastles')
        else
            local valid = true
            --Don't allow starting CityOfCarcassonne tile to be selected with all if there is
            --already a selected starting tile that is incompatible
            if key == 'StartingTileCoC' and value == true then
                if not isCompatibleStartingTile('StartingTileCoC') then
                    valid = false
                    allChecked = false
                    printToColor(translate("MESSAGE_BASE_STARTING_TILE_NOT_COMPATIBLE_WITH_COC"), sPlayer, ERROR_COLOR)
                end
            end
            if valid then
              self.editButton({index = btnIDs[getCheckboxButtonKey(key)], label = label})
              Global.call('setControlPanelState', {key = key, value = value})
            end
        end
    end
    if allChecked then
      self.editButton({index = btnIDs[button_key], label = label})
    end
end

function onAnMAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'AnMAll')
end

function onAnMTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'AnMTiles', AllCheckboxButtonGroups)
end

function onAnMAbbeyToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'AnMAbbey', AllCheckboxButtonGroups)
end

function onAnMMayorToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'AnMMayor', AllCheckboxButtonGroups)
end

function onAnMWagonToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'AnMWagon', AllCheckboxButtonGroups)
end

function onAnMBarnToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'AnMBarn', AllCheckboxButtonGroups)
end

function onCKnRAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'CKnRAll')
end

function onKnRBTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'KnRBTiles', AllCheckboxButtonGroups)
end

function onStartingTileCoCToggle(Object, sPlayer)
    onStartingTileCheckboxToggle(sPlayer, 'StartingTileCoC', "MESSAGE_BASE_STARTING_TILE_NOT_COMPATIBLE_WITH_COC", AllCheckboxButtonGroups)
end

function onKnRBKingToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'KnRBKing', AllCheckboxButtonGroups)
end

function onKnRBRobberToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'KnRBRobber', AllCheckboxButtonGroups)
end

function onCultTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'CultTiles', AllCheckboxButtonGroups)
end

function onCatapultAllToggle(Object, sPlayer)
    printToColor("The Catapult is not yet implemented", sPlayer, ERROR_COLOR)
    --onAllButtonToggle(sPlayer, 'CatapultAll')
end

function onCatapultTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'CatapultTiles', AllCheckboxButtonGroups)
end

function onCatapultKnockOutToggle(Object, sPlayer)
    printToColor("The Catapult is not yet implemented", sPlayer, ERROR_COLOR)
    --onCheckboxToggle(sPlayer, 'CatapultKnockOut', AllCheckboxButtonGroups)
end

function onCatapultSeductionToggle(Object, sPlayer)
    printToColor("The Catapult is not yet implemented", sPlayer, ERROR_COLOR)
    --onCheckboxToggle(sPlayer, 'CatapultSeduction', AllCheckboxButtonGroups)
end

function onCatapultTargetToggle(Object, sPlayer)
    printToColor("The Catapult is not yet implemented", sPlayer, ERROR_COLOR)
    --onCheckboxToggle(sPlayer, 'CatapultTarget', AllCheckboxButtonGroups)
end

function onCatapultCatchToggle(Object, sPlayer)
    printToColor("The Catapult is not yet implemented", sPlayer, ERROR_COLOR)
    --onCheckboxToggle(sPlayer, 'CatapultCatch', AllCheckboxButtonGroups)
end

function onBCnBAllToggle(Object, sPlayer)
    printToColor("Bridges, Castles, and Bazaars is not yet implemented", sPlayer, ERROR_COLOR)
    --onAllButtonToggle(sPlayer, 'BCnBAll')
end

function onBCnBTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'BCnBTiles', AllCheckboxButtonGroups)
end

function onBCnBBridgesDecr(Object, sPlayer)
    onCounterDecr(sPlayer, 'BCnBBridges', 'BCnBNumBridges', 1, NUM_BRIDGES_PER_PLAYER[numPlayers] - 1, "MESSAGE_BRIDGE_COUNT_WARNING")
end

function onBCnBBridgesIncr(Object, sPlayer)
    onCounterIncr(sPlayer, 'BCnBBridges', 'BCnBNumBridges', 12, NUM_BRIDGES_PER_PLAYER[numPlayers] + 1, "MESSAGE_BRIDGE_COUNT_WARNING")
end

function onBCnBBridgesToggle(Object, sPlayer)
    onCounterToggle(sPlayer, 'BCnBBridges', 'BCnBNumBridges', nil, AllCheckboxButtonGroups)
end

function onBCnBCastlesDecr(Object, sPlayer)
    onCounterDecr(sPlayer, 'BCnBCastles', 'BCnBNumCastles', 1, NUM_CASTLES_PER_PLAYER[numPlayers] - 1, "MESSAGE_CASTLE_COUNT_WARNING")
end

function onBCnBCastlesIncr(Object, sPlayer)
    onCounterIncr(sPlayer, 'BCnBCastles', 'BCnBNumCastles', 12, NUM_BRIDGES_PER_PLAYER[numPlayers] + 1, "MESSAGE_CASTLE_COUNT_WARNING")
end

function onBCnBCastlesToggle(Object, sPlayer)
    onCounterToggle(sPlayer, 'BCnBCastles', 'BCnBNumCastles', nil, AllCheckboxButtonGroups)
end

function onBCnBBazaarsToggle(Object, sPlayer)
    printToColor("Bridges, Castles, and Bazaars is not yet implemented", sPlayer, ERROR_COLOR)
    --onCheckboxToggle(sPlayer, 'BCnBBazaars', AllCheckboxButtonGroups)
end

function onHnSAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'HnSAll')
end

function onHnSTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'HnSTiles', AllCheckboxButtonGroups)
end

function onHnSShepherdToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'HnSShepherd', AllCheckboxButtonGroups)
end

function onHnSHillsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'HnSHills', AllCheckboxButtonGroups)
end

function onHnSVineyardsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'HnSVineyards', AllCheckboxButtonGroups)
end

function onPlayerChangedColor(player)
    if Global.call('gameIsActive', {}) then return end
    numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if (Player[color] ~= nil and Player[color].seated) or Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if Global.call('getControlPanelState', {key = 'BCnBBridges'}) then
        self.editButton({index = btnIDs[getCheckboxButtonKey('TowerTowers')], label = '' .. NUM_BRIDGES_PER_PLAYER[numPlayers]})
    end
    if Global.call('getControlPanelState', {key = 'BCnBCastles'}) then
        self.editButton({index = btnIDs[getCheckboxButtonKey('TowerTowers')], label = '' .. NUM_CASTLES_PER_PLAYER[numPlayers]})
    end
end
