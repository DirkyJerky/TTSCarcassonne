#include !/TTSCarcassonne/scripts/control_panel_common

local ROW_1 = 5.3
local ROW_2 = 2.4
local ROW_3 = -2.75
local ROW_4 = -6.85
local ROW_5 = -11.0
local COLUMN_1_1 = 7.9
local COLUMN_1_2 = 6.25
local COLUMN_1_3 = 2.95
local COLUMN_1_4 = -0.45
local COLUMN_1_5 = -3.8
local COLUMN_1_6 = -7.1
local COLUMN_2_1 = 7.60
local COLUMN_2_2 = 6.1
local COLUMN_2_3 = 3.8
local COLUMN_2_4 = 1.55
local COLUMN_2_5 = -0.85
local COLUMN_2_6 = -3.025
local COLUMN_2_7 = -6.6

-- Names of the checkboxes that will trigger multiple other checkboxes (typically all in an expansion set) to be checked
local AllCheckboxButtonGroups = {
  ["WoFAll"] = {'WoFTiles', 'WoFWheelTiles', 'StartingTileWoF', 'WoFCrowns', 'WoFFortune', 'WoFTaxes', 'WoFFamine', 'WoFStorm', 'WoFInquisition', 'WoFPlague'},
  ["FlierAll"] = {'FlierTiles', 'FlierFlier'},
  ["MessagesAll"] = {'MessagesMessages', 'MessagesMessenger'},
  ["FerriesAll"] = {'FerriesTiles', 'FerriesFerries'},
  ["GoldminesAll"] = {'GoldminesTiles', 'GoldminesGold'},
  ["MnWAll"] = {'MnWTiles', 'MnWMage', 'MnWWitch'},
  ["RobbersAll"] = {'RobbersTiles', 'RobbersRobbers'},
}

function onLoad()
    Timer.create({identifier='' .. os.clock(), function_name='initializeControlPanelPage', function_owner=nil, parameters=nil, delay=0.0001})
end

function initializeControlPanelPage()
    localizeUI(Global.call('getControlPanelState', {key = 'currentLanguage'}))
    self.UI.setAttribute("WoFExpansionLabel", "text", translate("Wheel of Fortune"))
    self.UI.setAttribute("WoFTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("StartingTileWoFLabel", "text", translate("LABEL_WHEEL_SHORT_NAME"))
    self.UI.setAttribute("WoFCrownsLabel", "text", translate("Crown"))
    self.UI.setAttribute("WoFFortuneLabel", "text", translate("Fortune"))
    self.UI.setAttribute("WoFTaxesLabel", "text", translate("Taxes"))
    self.UI.setAttribute("WoFWheelTilesLabel", "text", translate("LABEL_WHEEL_TILES"))
    self.UI.setAttribute("WoFFamineLabel", "text", translate("Famine"))
    self.UI.setAttribute("WoFStormLabel", "text", translate("Storm"))
    self.UI.setAttribute("WoFInquisitionLabel", "text", translate("Inquisition"))
    self.UI.setAttribute("WoFPlagueLabel", "text", translate("Plague"))

    self.UI.setAttribute("MiniExpansionsLabel", "text", translate("LABEL_MINI_EXPANSIONS"))

    self.UI.setAttribute("FlierExpansionLabel", "text", "1. " .. translate("The Flier"))
    self.UI.setAttribute("FlierTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("FlierFlierLabel", "text", translate("Fliers"))

    self.UI.setAttribute("MessagesExpansionLabel", "text", "2. " .. translate("The Messages"))
    self.UI.setAttribute("MessagesMessagesLabel", "text", translate("Messages"))
    self.UI.setAttribute("MessagesMessengerLabel", "text", translate("Messenger"))

    self.UI.setAttribute("FerriesExpansionLabel", "text", "3. " .. translate("The Ferries"))
    self.UI.setAttribute("FerriesTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("FerriesFerriesLabel", "text", translate("Ferries"))

    self.UI.setAttribute("GoldminesExpansionLabel", "text", "4. " .. translate("The Goldmines"))
    self.UI.setAttribute("GoldminesTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("GoldminesGoldLabel", "text", translate("Gold"))

    self.UI.setAttribute("MnWExpansionLabel", "text", "5. " .. translate("Mage & Witch"))
    self.UI.setAttribute("MnWTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("MnWMageLabel", "text", translate("Mage"))
    self.UI.setAttribute("MnWWitchLabel", "text", translate("Witch"))

    self.UI.setAttribute("RobbersExpansionLabel", "text", "6. " .. translate("The Robbers"))
    self.UI.setAttribute("RobbersTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("RobbersRobbersLabel", "text", translate("Robbers"))

    self.UI.setAttribute("PreviousPageLabel", "text", translate("LABEL_PREVIOUS_PAGE"))
    self.UI.setAttribute("NextPageLabel", "text", translate("LABEL_NEXT_PAGE"))

--Wheel of Fortune
    initializeAllCheckbox(COLUMN_1_1, ROW_1, 'WoFAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_1_2, ROW_1, 'WoFTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 52}}))
    initializeCheckbox(COLUMN_1_3, ROW_1, 'StartingTileWoF', translate("TOOLTIP_WHEEL_OF_FORTUNE"))
    initializeCheckbox(COLUMN_1_4, ROW_1, 'WoFCrowns', translate("TOOLTIP_WHEEL_CROWN"))
    initializeCheckbox(COLUMN_1_5, ROW_1, 'WoFFortune', translate("TOOLTIP_WHEEL_FORTUNE"))
    initializeCheckbox(COLUMN_1_6, ROW_1, 'WoFTaxes', translate("TOOLTIP_WHEEL_TAX"))
    initializeCheckbox(COLUMN_1_2, ROW_2, 'WoFWheelTiles', translate("TOOLTIP_WHEEL_TILES"))
    initializeCheckbox(COLUMN_1_3, ROW_2, 'WoFFamine', translate("TOOLTIP_WHEEL_FAMINE"))
    initializeCheckbox(COLUMN_1_4, ROW_2, 'WoFStorm', translate("TOOLTIP_WHEEL_STORM"))
    initializeCheckbox(COLUMN_1_5, ROW_2, 'WoFInquisition', translate("TOOLTIP_WHEEL_INQUISITION"))
    initializeCheckbox(COLUMN_1_6, ROW_2, 'WoFPlague', translate("TOOLTIP_WHEEL_PLAGUE"))

--The Flier
    initializeAllCheckbox(COLUMN_2_1, ROW_3, 'FlierAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2_2, ROW_3, 'FlierTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 8}}))
    initializeCheckbox(COLUMN_2_3, ROW_3, 'FlierFlier', translate("TOOLTIP_FLIER"))

--The Messages
    -- initializeAllCheckbox(COLUMN_2_5, ROW_3, 'MessagesAll', "", AllCheckboxButtonGroups)
    -- initializeCheckbox(COLUMN_2_6, ROW_3, 'MessagesMessages', "")
    -- initializeCheckbox(COLUMN_2_7, ROW_3, 'MessagesMessenger', "")

--The Ferries
    initializeAllCheckbox(COLUMN_2_1, ROW_4, 'FerriesAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2_2, ROW_4, 'FerriesTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 8}}))
    initializeCheckbox(COLUMN_2_3, ROW_4, 'FerriesFerries', translate("TOOLTIP_FERRY"))

--The Goldmines
    initializeAllCheckbox(COLUMN_2_5, ROW_4, 'GoldminesAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2_6, ROW_4, 'GoldminesTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 8}}))
    initializeCheckbox(COLUMN_2_7, ROW_4, 'GoldminesGold', translate("TOOLTIP_GOLD"))

--Mage & Witch
    -- initializeAllCheckbox(COLUMN_2_1, ROW_5, 'MnWAll', "", AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2_2, ROW_5, 'MnWTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 8}}))
    -- initializeCheckbox(COLUMN_2_3, ROW_5, 'MnWMage', "")
    -- initializeCheckbox(COLUMN_2_4, ROW_5, 'MnWWitch', "")

--The Robbers
    -- initializeAllCheckbox(COLUMN_2_5, ROW_5, 'RobbersAll', "", AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2_6, ROW_5, 'RobbersTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 8}}))
    -- initializeCheckbox(COLUMN_2_7, ROW_5, 'RobbersRobbers', "")
end

function localizeUI(language)
    if language == 'nl-NL' then
        --ControlPanelExpansionLabel
        self.UI.setAttribute("WoFExpansionLabel", "fontSize", 48)
        self.UI.setAttribute("FlierExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("MessagesExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("FerriesExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("GoldminesExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("MnWExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("RobbersExpansionLabel", "fontSize", 56)
        --ControlPanelItemLabel
        self.UI.setAttribute("WoFTilesLabel", "fontSize", 40)
        self.UI.setAttribute("StartingTileWoFLabel", "fontSize", 40)
        self.UI.setAttribute("WoFCrownsLabel", "fontSize", 40)
        self.UI.setAttribute("WoFFortuneLabel", "fontSize", 40)
        self.UI.setAttribute("WoFTaxesLabel", "fontSize", 40)
        self.UI.setAttribute("WoFWheelTilesLabel", "fontSize", 40)
        self.UI.setAttribute("WoFFamineLabel", "fontSize", 40)
        self.UI.setAttribute("WoFStormLabel", "fontSize", 40)
        self.UI.setAttribute("WoFInquisitionLabel", "fontSize", 40)
        self.UI.setAttribute("WoFPlagueLabel", "fontSize", 40)
        self.UI.setAttribute("FlierTilesLabel", "fontSize", 40)
        self.UI.setAttribute("FlierFlierLabel", "fontSize", 40)
        self.UI.setAttribute("MessagesMessagesLabel", "fontSize", 40)
        self.UI.setAttribute("MessagesMessengerLabel", "fontSize", 40)
        self.UI.setAttribute("FerriesTilesLabel", "fontSize", 40)
        self.UI.setAttribute("FerriesFerriesLabel", "fontSize", 40)
        self.UI.setAttribute("GoldminesTilesLabel", "fontSize", 40)
        self.UI.setAttribute("GoldminesGoldLabel", "fontSize", 40)
        self.UI.setAttribute("MnWTilesLabel", "fontSize", 40)
        self.UI.setAttribute("MnWMageLabel", "fontSize", 40)
        self.UI.setAttribute("MnWWitchLabel", "fontSize", 40)
        self.UI.setAttribute("RobbersTilesLabel", "fontSize", 40)
        self.UI.setAttribute("RobbersRobbersLabel", "fontSize", 40)
        self.UI.setAttribute("HnSVineyardsLabel", "fontSize", 40)
        --ControlPanelPageLabel
        self.UI.setAttribute("NextPageLabel", "width", 310)
    end
end

function onAllButtonToggle(sPlayer, key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local buttonGroup = AllCheckboxButtonGroups[key]
    if buttonGroup == nil then
      return
    end
    local button_key = getCheckboxButtonKey(key)
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = key}) then
            allChecked = false
        end
    end
    local label
    local value
    if allChecked then
        label = ''
        value = false
    else
        label = 'X'
        value = true
    end
    self.editButton({index = btnIDs[button_key], label = label})
    for _, key in ipairs(buttonGroup) do
        local valid = true
        --Don't allow starting Wheel tile to be selected with all if there is
        --already a selected starting tile that is incompatible
        if key == 'StartingTileWoF' and value == true then
            if not isCompatibleStartingTile('StartingTileWoF') then
                valid = false
                allChecked = false
                printToColor(translate("MESSAGE_BASE_STARTING_TILE_NOT_COMPATIBLE_WITH_WOF"), sPlayer, ERROR_COLOR)
            end
        end
        if valid then
            self.editButton({index = btnIDs[getCheckboxButtonKey(key)], label = label})
            Global.call('setControlPanelState', {key = key, value = value})
        end
    end

end

function onWoFAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'WoFAll')
end

function onWoFTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'WoFTiles', AllCheckboxButtonGroups)
end

function onWoFWheelTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'WoFWheelTiles', AllCheckboxButtonGroups)
end

function onStartingTileWoFToggle(Object, sPlayer)
    onStartingTileCheckboxToggle(sPlayer, 'StartingTileWoF', "MESSAGE_BASE_STARTING_TILE_NOT_COMPATIBLE_WITH_WOF", AllCheckboxButtonGroups)
end

function onWoFCrownsToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFCrowns')
end

function onWoFFortuneToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFFortune')
end

function onWoFTaxesToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFTaxes')
end

function onWoFFamineToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFFamine')
end

function onWoFStormToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFStorm')
end

function onWoFInquisitionToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFInquisition')
end

function onWoFPlagueToggle(Object, sPlayer)
    onWoFOptionToggle(sPlayer, 'WoFPlague')
end

function onWoFOptionToggle(sPlayer, option)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    if Global.call('getControlPanelState', {key = 'StartingTileWoF'}) == false then
        printToColor(translate("MESSAGE_WHEEL_DISABLED"), sPlayer, ERROR_COLOR)
        return
    end
    onCheckboxToggle(sPlayer, option, AllCheckboxButtonGroups)
end

function onFlierAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'FlierAll')
end

function onFlierTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'FlierTiles', AllCheckboxButtonGroups)
end

function onFlierFlierToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'FlierFlier', AllCheckboxButtonGroups)
end

function onMessagesAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'MessagesAll')
end

function onMessagesMessagesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'MessagesMessages', AllCheckboxButtonGroups)
end

function onMessagesMessengerToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'MessagesMessenger', AllCheckboxButtonGroups)
end

function onFerriesAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'FerriesAll')
end

function onFerriesTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'FerriesTiles', AllCheckboxButtonGroups)
end

function onFerriesFerriesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'FerriesFerries', AllCheckboxButtonGroups)
end

function onGoldminesAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'GoldminesAll')
end

function onGoldminesTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'GoldminesTiles', AllCheckboxButtonGroups)
end

function onGoldminesGoldToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'GoldminesGold', AllCheckboxButtonGroups)
end

function onMnWAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'MnWAll')
end

function onMnWTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'MnWTiles', AllCheckboxButtonGroups)
end

function onMnWMageToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'MnWMage', AllCheckboxButtonGroups)
end

function onMnWWitchToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'MnWWitch', AllCheckboxButtonGroups)
end

function onRobbersAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'RobbersAll')
end

function onRobbersTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'RobbersTiles', AllCheckboxButtonGroups)
end

function onRobbersRobbersToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'RobbersRobbers', AllCheckboxButtonGroups)
end
