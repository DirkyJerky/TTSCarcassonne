#include !\TTSCarcassonne\scripts\control_panel_common

local ROW_1 = 6.5
local ROW_2 = 1.1
local ROW_3 = -2.95
local ROW_4 = -7.1
local ROW_5 = -11.4
local COLUMN_1 = 7.9
local COLUMN_2 = 6.25
local COLUMN_3 = 2.95
local COLUMN_4 = -0.4
local COLUMN_5 = -3.75
local COLUMN_6 = -7.1

-- Names of the checkboxes that will trigger multiple other checkboxes (typically all in an expansion set) to be checked
local AllCheckboxButtonGroups = {
  ["InCAll"] = {'InCTiles', 'InCBigFollower', 'InCInns', 'InCCathedrals'},
  ["TnBAll"] = {'TnBTiles', 'TnBBuilder', 'TnBPig', 'TnBTradeGoods'},
  ["PnDAll"] = {'PnDTiles', 'PnDDragon', 'PnDFairy', 'PnDMagicPortal', 'PnDPrincess'},
  ["TowerAll"] = {'TowerTiles', 'TowerTowers'}
}

numPlayers = 1

function onLoad()
    Timer.create({identifier='' .. os.clock(), function_name='initializeControlPanelPage', function_owner=nil, parameters=nil, delay=0.0001})
end

function initializeControlPanelPage()
    localizeUI(Global.call('getControlPanelState', {key = 'currentLanguage'}))
    self.UI.setAttribute("BaseGameExpansionLabel", "text", translate("LABEL_BASE_GAME"))
    self.UI.setAttribute("BaseTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("BaseFollowersLabel", "text", translate("Followers"))
    self.UI.setAttribute("CIIAbbotLabel", "text", translate("LABEL_ABBOT"))
    self.UI.setAttribute("MajorExpansionsLabel", "text", translate("LABEL_MAJOR_EXPANSIONS"))
    self.UI.setAttribute("InCExpansionLabel", "text", "1. " .. translate("Inns & Cathedrals"))
    self.UI.setAttribute("InCTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("InCBigFollowerLabel", "text", translate("Big Follower"))
    self.UI.setAttribute("InCInnsLabel", "text", translate("Inns"))
    self.UI.setAttribute("InCCathedralsLabel", "text", translate("Cathedrals"))
    self.UI.setAttribute("TnBExpansionLabel", "text", "2. " .. translate("Traders & Builders"))
    self.UI.setAttribute("TnBTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("TnBBuilderLabel", "text", translate("Builder"))
    self.UI.setAttribute("TnBPigLabel", "text", translate("Pig"))
    self.UI.setAttribute("TnBTradeGoodsLabel", "text", translate("Trade Goods"))
    self.UI.setAttribute("PnDExpansionLabel", "text", "3. " .. translate("The Princess & The Dragon"))
    self.UI.setAttribute("PnDTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("PnDDragonLabel", "text", translate("Dragon"))
    self.UI.setAttribute("PnDFairyLabel", "text", translate("Fairy"))
    self.UI.setAttribute("PnDPortalsLabel", "text", translate("Portals"))
    self.UI.setAttribute("PnDPrincessLabel", "text", translate("Princess"))
    self.UI.setAttribute("TowerExpansionLabel", "text", "4. " .. translate("The Tower"))
    self.UI.setAttribute("TowerTilesLabel", "text", translate("LABEL_TILES"))
    self.UI.setAttribute("TowerTowersLabel", "text", translate("Towers"))
    self.UI.setAttribute("PreviousPageLabel", "text", translate("LABEL_PREVIOUS_PAGE"))
    self.UI.setAttribute("NextPageLabel", "text", translate("LABEL_NEXT_PAGE"))


    initializeCounter('BaseFollower', COLUMN_3, BUTTON_HEIGHT, ROW_1, "TOOLTIP_FOLLOWER", 'BaseNumFollowers')


-- Base game
    initializeCheckbox(COLUMN_2, ROW_1, 'BaseTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 71}}))
    initializeCheckbox(COLUMN_4, ROW_1, 'CIIAbbot', translate("TOOLTIP_ALLOW_ABBOT"))

--Inns & Cathedrals
    initializeAllCheckbox(COLUMN_1, ROW_2, 'InCAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_2, 'InCTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 18}}))
    initializeCheckbox(COLUMN_3, ROW_2, 'InCBigFollower', translate("TOOLTIP_BIG_FOLLOWER"))
    initializeCheckbox(COLUMN_4, ROW_2, 'InCInns', translate("TOOLTIP_INN"))
    initializeCheckbox(COLUMN_5, ROW_2, 'InCCathedrals', translate("TOOLTIP_CATHEDRAL"))

--Traders & Builders
    initializeAllCheckbox(COLUMN_1, ROW_3, 'TnBAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_3, 'TnBTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 24}}))
    initializeCheckbox(COLUMN_3, ROW_3, 'TnBBuilder', translate("TOOLTIP_BUILDER"))
    initializeCheckbox(COLUMN_4, ROW_3, 'TnBPig', translate("TOOLTIP_PIG"))
    initializeCheckbox(COLUMN_5, ROW_3, 'TnBTradeGoods', translate("TOOLTIP_TRADE_GOODS"))

--The Princess & The Dragon
    initializeAllCheckbox(COLUMN_1, ROW_4, 'PnDAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_4, 'PnDTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 30}}))
    initializeCheckbox(COLUMN_3, ROW_4, 'PnDDragon', translate("TOOLTIP_DRAGON"))
    initializeCheckbox(COLUMN_4, ROW_4, 'PnDFairy', translate("TOOLTIP_FAIRY"))
    initializeCheckbox(COLUMN_5, ROW_4, 'PnDMagicPortal', translate("TOOLTIP_MAGIC_PORTAL"))
    initializeCheckbox(COLUMN_6, ROW_4, 'PnDPrincess', translate("TOOLTIP_PRINCESS"))

--The Tower
    initializeAllCheckbox(COLUMN_1, ROW_5, 'TowerAll', translate("TOOLTIP_ENABLE_ALL"), AllCheckboxButtonGroups)
    initializeCheckbox(COLUMN_2, ROW_5, 'TowerTiles', translate({"TOOLTIP_NUM_TILES", {'{n1}', 18}}))
    initializeCounter('BaseFollower', COLUMN_3, BUTTON_HEIGHT, ROW_1, "TOOLTIP_FOLLOWER", 'BaseNumFollowers')

    initializeCounter('TowerTowers', COLUMN_3, BUTTON_HEIGHT, ROW_5, "TOOLTIP_TOWER", 'TowerNumTowers')
end

function localizeUI(language)
    if language == 'nl-NL' then
        --ControlPanelExpansionLabel
        self.UI.setAttribute("BaseGameExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("InCExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("TnBExpansionLabel", "fontSize", 52)
        self.UI.setAttribute("PnDExpansionLabel", "fontSize", 56)
        self.UI.setAttribute("TowerExpansionLabel", "fontSize", 56)
        --ControlPanelItemLabel
        self.UI.setAttribute("BaseTilesLabel", "fontSize", 40)
        self.UI.setAttribute("BaseFollowersLabel", "fontSize", 40)
        self.UI.setAttribute("CIIAbbotLabel", "fontSize", 40)
        self.UI.setAttribute("InCTilesLabel", "fontSize", 40)
        self.UI.setAttribute("InCBigFollowerLabel", "fontSize", 40)
        self.UI.setAttribute("InCInnsLabel", "fontSize", 40)
        self.UI.setAttribute("InCCathedralsLabel", "fontSize", 40)
        self.UI.setAttribute("TnBTilesLabel", "fontSize", 40)
        self.UI.setAttribute("TnBBuilderLabel", "fontSize", 40)
        self.UI.setAttribute("TnBPigLabel", "fontSize", 40)
        self.UI.setAttribute("TnBTradeGoodsLabel", "fontSize", 40)
        self.UI.setAttribute("PnDTilesLabel", "fontSize", 40)
        self.UI.setAttribute("PnDDragonLabel", "fontSize", 40)
        self.UI.setAttribute("PnDFairyLabel", "fontSize", 40)
        self.UI.setAttribute("PnDPortalsLabel", "fontSize", 40)
        self.UI.setAttribute("PnDPrincessLabel", "fontSize", 40)
        self.UI.setAttribute("TowerTilesLabel", "fontSize", 40)
        self.UI.setAttribute("TowerTowersLabel", "fontSize", 40)
        --ControlPanelPageLabel
        self.UI.setAttribute("NextPageLabel", "width", 310)
    end
end


function onAllButtonToggle(sPlayer, key)
    if Global.call('checkControlPanelPrivileges', {sColor = sPlayer}) == false then return end
    local buttonGroup = AllCheckboxButtonGroups[key]
    if buttonGroup == nil then
      return
    end
    local button_key = getCheckboxButtonKey(key)
    local allChecked = true
    for _, key in ipairs(buttonGroup) do
        if not Global.call('getControlPanelState', {key = key}) then
            allChecked = false
        end
    end
    local label
    local value
    if allChecked then
        label = ''
        value = false
    else
        label = 'X'
        value = true
    end
    self.editButton({index = btnIDs[button_key], label = label})
    for _, key in ipairs(buttonGroup) do
        if key == 'TowerTowers' then
            setCheckboxCounter('TowerTowers', 'TowerNumTowers')
        else
            self.editButton({index = btnIDs[getCheckboxButtonKey(key)], label = label})
            Global.call('setControlPanelState', {key = key, value = value})
        end
    end
end

function onBaseTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'BaseTiles', AllCheckboxButtonGroups)
end

function onBaseFollowerDecr(Object, sPlayer)
    onCounterDecr(sPlayer, 'BaseFollower', 'BaseNumFollowers', 0, 6, "MESSAGE_FOLLOWER_COUNT_WARNING")
end

function onBaseFollowerIncr(Object, sPlayer)
    onCounterIncr(sPlayer, 'BaseFollower', 'BaseNumFollowers', 16, 8, "MESSAGE_FOLLOWER_COUNT_WARNING")
end

function onBaseFollowerToggle(Object, sPlayer)
    onCounterToggle(sPlayer, 'BaseFollower', 'BaseNumFollowers', "MESSAGE_FOLLOWER_DISABLED_WARNING", AllCheckboxButtonGroups)
end

function onCIIAbbotToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'CIIAbbot', AllCheckboxButtonGroups)
end

function onInCAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'InCAll')
end

function onInCTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCTiles', AllCheckboxButtonGroups)
end

function onInCBigFollowerToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCBigFollower', AllCheckboxButtonGroups)
end

function onInCInnsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCInns', AllCheckboxButtonGroups)
end

function onInCCathedralsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'InCCathedrals', AllCheckboxButtonGroups)
end

function onTnBAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'TnBAll')
end

function onTnBTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTiles', AllCheckboxButtonGroups)
end

function onTnBBuilderToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBBuilder', AllCheckboxButtonGroups)
end

function onTnBPigToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBPig', AllCheckboxButtonGroups)
end

function onTnBTradeGoodsToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TnBTradeGoods', AllCheckboxButtonGroups)
end

function onPnDAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'PnDAll')
end

function onPnDTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDTiles', AllCheckboxButtonGroups)
end

function onPnDDragonToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDDragon', AllCheckboxButtonGroups)
end

function onPnDFairyToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDFairy', AllCheckboxButtonGroups)
end

function onPnDMagicPortalToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDMagicPortal', AllCheckboxButtonGroups)
end

function onPnDPrincessToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'PnDPrincess', AllCheckboxButtonGroups)
end

function onTowerAllToggle(Object, sPlayer)
    onAllButtonToggle(sPlayer, 'TowerAll')
end

function onTowerTilesToggle(Object, sPlayer)
    onCheckboxToggle(sPlayer, 'TowerTiles', AllCheckboxButtonGroups)
end

function onTowerTowersDecr(Object, sPlayer)
    onCounterDecr(sPlayer, 'TowerTowers', 'TowerNumTowers', 1, NUM_TOWERS_PER_PLAYER[numPlayers]-1, "MESSAGE_TOWER_COUNT_WARNING")
end

function onTowerTowersIncr(Object, sPlayer)
    onCounterIncr(sPlayer, 'TowerTowers', 'TowerNumTowers', 30, NUM_TOWERS_PER_PLAYER[numPlayers]+1, "MESSAGE_TOWER_COUNT_WARNING")
end

function onTowerTowersToggle(Object, sPlayer)
    onCounterToggle(sPlayer, 'TowerTowers', 'TowerNumTowers', nil, AllCheckboxButtonGroups)
end

function onPlayerChangedColor(player)
    if Global.call('gameIsActive', {}) then return end
    numPlayers = 0
    for _, color in ipairs(PLAYER_COLORS) do
        if (Player[color] ~= nil and Player[color].seated) or Global.call('getControlPanelState', {key = color .. 'Control'}) ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    if Global.call('getControlPanelState', {key = 'TowerTowers'}) then
        self.editButton({index = btnIDs[getCheckboxButtonKey('TowerTowers')], label = '' .. NUM_TOWERS_PER_PLAYER[numPlayers]})
    end
end
