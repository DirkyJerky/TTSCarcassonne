--these functions are typically used when a player picks up an object to be placed. They will create
--a temporary object wherever a legal move can be made, which will be deleted when the object is released.

FIGURE_MARKER_ALPHA = 150/255
TILE_MARKER_COLOR = {r=49/255, g=179/255, b=43/255, a=75/255}

function showHintMarkers()
    local pickedUpObject = gPickedUpObject
    deleteMarkers()
    if tostring(pickedUpObject) == 'Card(Clone) (LuaGameObjectScript)' and getTileDataForTile(pickedUpObject).sides ~= nil then
        if turnState == 'awaiting tile placement' then
            showTileMarkers(pickedUpObject)
        end
    else
        local pickedUpObjectfigureName = pickedUpObject.getVar('figureName')
        if (table.contains(FOLLOWER_TYPES, pickedUpObjectfigureName) or table.contains(SPECIAL_FIGURE_TYPES, pickedUpObjectfigureName) or pickedUpObjectfigureName == 'Tower') and
            ((currentMiniTurn ~= nil and pickedUpObject.getVar('owner') == activePlayers[currentMiniTurn]) or
            (currentMiniTurn == nil and pickedUpObject.getVar('owner') == activePlayers[currentPlayer])) then
            if turnState == 'awaiting figure decision' then
                if pickedUpObjectfigureName == 'Tower' then
                    showTowerMarkers(pickedUpObject)
                else
                    showFigureMarkers(pickedUpObject)
                end
            elseif pickedUpObjectfigureName == 'Wagon' and turnState == 'replace finished wagons' then
                local locationMarkers = AnMShowWagonFeatureMarkers(pickedUpObject, activePlayers[currentMiniTurn])
                if locationMarkers ~= nil then
                    showLocationMarkers(pickedUpObject, locationMarkers)
                end
            elseif turnState == 'awaiting flier decision' or turnState == 'awaiting flier decision - phantom' then
                showFlierFeatureMarkers(pickedUpObject)
            elseif turnState == 'awaiting phantom decision' then
                showFigureMarkers(pickedUpObject)
            elseif turnState == 'prompt moving to carcassonne' then
                showToCoCFeatureMarkers(pickedUpObject)
            elseif turnState == 'prompt moving from carcassonne' or turnState == 'game over - prompt moving from carcassonne' then
                showFromCoCFeatureMarkers(pickedUpObject)
            end
        elseif pickedUpObjectfigureName == 'Fairy' and turnState == 'awaiting figure decision' then
            PnDFairyShowHighlights(pickedUpObject)
        elseif pickedUpObjectfigureName == 'Count' and turnState == 'prompt moving count' then
            showToCoCFeatureMarkers(pickedUpObject)
        end
    end
    return 1
end

function showTileMarkers(newTile)
    local tileMarkers = {}
    for x, tileColumn in pairs(tileGrid) do
        for z, tileLocation in pairs(tileColumn) do
            for side, sideDelta in ipairs(SIDE_DELTA) do
                if tileMarkers[x + sideDelta.x] == nil then
                    tileMarkers[x + sideDelta.x] = {}
                end
                if tileMarkers[x + sideDelta.x][z + sideDelta.z] == nil then
                    tileMarkers[x + sideDelta.x][z + sideDelta.z] = false
                    for tileRotation=1, 4 do
                        if isValidTileLocation(newTile, tileRotation, x + sideDelta.x, z + sideDelta.z, false) then
                            tileMarkers[x + sideDelta.x][z + sideDelta.z] = true
                        end
                    end
                end
            end
        end
    end
    local hasTileLocation = false
    for x, tileColumn in pairs(tileMarkers) do
        for z, tileLocation in pairs(tileColumn) do
            if tileLocation == true then
                local params = {}
                params.type = "BlockSquare"
                params.position = {(x * TILE_SPACING) - MIDDLE_OFFSET.x, 1.0, (z * TILE_SPACING) - MIDDLE_OFFSET.z}
                params.scale = {1.5, 0.1, 1.5}
                params.callback_owner = Global
                params.callback = "identifyFeature"
                params.sound = false
                local newObject = spawnObject(params)
                table.insert(featureMarkers, newObject)
                newObject.setColorTint(TILE_MARKER_COLOR)
                newObject.getComponent("BoxCollider").set("enabled", false)
                hasTileLocation = true
            end
        end
    end
    if not hasTileLocation then
        if isTileInPlay() then
            allGameMessage({"MESSAGE_HINTS_NO_TILE_LOCATION"}, NEUTRAL_COLOR)
        else
            allGameMessage(({"MESSAGE_HINTS_STARTING_TILE"}), NEUTRAL_COLOR)
        end
    end
    return 1
end

--show all possible locations where a figure can be put
--featuresToMark - features that have not yet been checked for marking
--positionsToVisit - list of positions for each tile (can be pruned as we search to save time)
function showFigureMarkers(newFigure)
    getActiveFigures()
    local locationMarkers = {}
    locationMarkers[lastPlacedTileX] = {}
    locationMarkers[lastPlacedTileX][lastPlacedTileZ] = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[lastPlacedTileX][lastPlacedTileZ].tile_guid))
    local specialFeatures = tileData.specialFeatures
    if specialFeatures ~= nil then
        for specialFeatureNum, specialFeature in pairs(specialFeatures) do
            if specialFeature[1] ~= 'Tower Foundation' then
                table.insert(positionsToVisit, specialFeatureNum+12)
            end
        end
    end
    for featureMapPosition=1, 12 do
        if newFigure.getVar('figureName') ~= 'Barn' or featureMapPosition > 4 and featureMapPosition % 2 == 1 then
            table.insert(positionsToVisit, featureMapPosition)
        end
    end

    local x = lastPlacedTileX
    local z = lastPlacedTileZ

    for _, featureMapPosition in ipairs(positionsToVisit) do
        local featureNum = getFeatureNumAt(x, z, featureMapPosition)
        if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
            if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                setOrUpdateLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                featuresToMark[featureNum] = nil
            end
        end
    end
    --uncapped towers
    if controlPanelSettings['TowerTowers'] and table.contains(MEEPLE_TYPES, newFigure.getVar('figureName')) then
        --all tower locations are candidates for placing followers if they are legally placed
        for _, obj in ipairs(getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()) do
            if obj.getVar('figureName') == 'Tower' then
                local xIndex, zIndex, xPosition, zPosition = getFigureTileLocation(obj)
                if tileGridOccupied(xIndex, zIndex) then
                    local closestFeatureMapPosition = findClosestPosition(xIndex, zIndex, xPosition, zPosition)
                    local featureNum = getFeatureNumAt(xIndex, zIndex, closestFeatureMapPosition)
                    if featureNum ~= nil and isValidFigureLocation(newFigure, xIndex, zIndex, closestFeatureMapPosition, featureNum, false) then
                        setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, closestFeatureMapPosition, 1)
                    end
                end
            end
        end
    end
    --wheel of fortune crown spaces
    if controlPanelSettings['WoFCrowns'] and table.contains(MEEPLE_TYPES, newFigure.getVar('figureName')) then
        for _, tileIndex in ipairs({1, 2, 3, 4, 5, 8, 9, 12, 14, 15}) do --these are the indexes of the tiles that have crown features on them
            local obj = getObjectFromGUID(EXPANSION_BAGS['WoF'].contents['WoFStartingTiles'].contents[tileIndex].guid)
            local xIndex, zIndex, _, _ = getFigureTileLocation(obj)
            if tileGridOccupied(xIndex, zIndex) then
                local positionsToVisit = {}
                if specialFeatures ~= nil then
                    for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                        if string.sub(specialFeature[1],1,6) == 'Crown-' then
                            table.insert(positionsToVisit, specialFeatureNum+12)
                        end
                    end
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)

                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidFigureLocation(newFigure, xIndex, zIndex, featureMapPosition, featureNum, false) then
                            setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                end
            end
        end
    end
    --magic portal
    if PnDIsMagicPortalAvailable() and table.contains(FOLLOWER_TYPES, newFigure.getVar('figureName')) then
        lastFrameTime = os.clock()
        allGameMessage(({"MESSAGE_HINTS_MAGIC_PORTAL_CALCULATING"}), NEUTRAL_COLOR)

        --prune features that don't have openings
        for featureNum, feature in pairs(featuresToMark) do
            if feature.numOpenings == 0 then
                featuresToMark[featureNum] = nil
            end
        end

        for x, tileColumn in pairs(tileGrid) do
            for z, tileLocation in pairs(tileColumn) do
                local positionsToVisit = {}
                if specialFeatures ~= nil then
                    for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                        if specialFeature[3] ~= nil then
                            table.insert(positionsToVisit, specialFeatureNum+12)
                        end
                    end
                end
                for featureMapPosition=1, 12 do
                    table.insert(positionsToVisit, featureMapPosition)
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(x, z, featureMapPosition)
                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                            setOrUpdateLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                    if os.clock() - lastFrameTime > FRAME_TIME then
                        lastFrameTime = lastFrameTime + FRAME_TIME
                        coroutine.yield(0)
                    end
                    --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                    if (turnState ~= 'awaiting figure decision' and turnState ~= 'awaiting phantom decision') or newFigure.held_by_color == nil then
                        return 1
                    end
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showTowerMarkers(newFigure)
    getActiveFigures()
    local locationMarkers = {}
    locationMarkers[lastPlacedTileX] = {}
    locationMarkers[lastPlacedTileX][lastPlacedTileZ] = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    lastFrameTime = os.clock()
    allGameMessage(({"MESSAGE_HINTS_TOWER_CALCULATING"}), NEUTRAL_COLOR)

    for x, tileColumn in pairs(tileGrid) do
        for z, tileLocation in pairs(tileColumn) do
            local positionsToVisit = {}
            local tileData = getTileDataForTile(getObjectFromGUID(tileLocation.tile_guid))
            local specialFeatures = tileData.specialFeatures
            if specialFeatures ~= nil then
                for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                    if specialFeature[1] == 'Tower Foundation' then
                        table.insert(positionsToVisit, specialFeatureNum+12)
                    end
                end
            end

            --since only specialFeatures are used, and since special feature positions are treated the same in the
            --context of both featureMapPositions and tilePositions, they can be used interchangably here
            for _, featureMapPosition in ipairs(positionsToVisit) do
                local featureNum = getFeatureNumAt(x, z, featureMapPosition)

                if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                    if isValidFigureLocation(newFigure, x, z, featureMapPosition, featureNum, false) then
                        setOrUpdateLocationMarker(locationMarkers, x, z, featureMapPosition, 0)
                        featuresToMark[featureNum] = nil
                    end
                end
                if os.clock() - lastFrameTime > FRAME_TIME then
                    lastFrameTime = lastFrameTime + FRAME_TIME
                    coroutine.yield(0)
                end
                --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                if turnState ~= 'awaiting figure decision' or newFigure.held_by_color == nil then
                    return 1
                end
            end
        end
    end

    for _, obj in ipairs(getObjectFromGUID(PLAY_AREA_SCRIPTING_ZONE_GUID).getObjects()) do
        if obj.getVar('figureName') == 'Tower' then
            local xIndex, zIndex, xPosition, zPosition = getFigureTileLocation(obj)
            if locationMarkers[xIndex] ~= nil and locationMarkers[xIndex][zIndex] ~= nil then
                local closestFeatureMapPosition = findClosestPosition(xIndex, zIndex, xPosition, zPosition)
                if locationMarkers[xIndex][zIndex][closestFeatureMapPosition] ~= nil then
                    setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, closestFeatureMapPosition, 1)
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showFlierFeatureMarkers(newFigure)
    local xIndex = lastPlacedTileX + flierOffset.x
    local zIndex = lastPlacedTileZ + flierOffset.z
    local locationMarkers = {}
    locationMarkers[xIndex] = {}
    locationMarkers[xIndex][zIndex] = {}

    local featuresToMark = {}

    local positionsToVisit = { }

    local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid))
    local specialFeatures = tileData.specialFeatures
    if specialFeatures ~= nil then
        for specialFeatureNum, specialFeature in pairs(specialFeatures) do
            if specialFeature[3] ~= nil then
                table.insert(positionsToVisit, specialFeatureNum+12)
            end
        end
    end
    for featureMapPosition=1, 12 do
        table.insert(positionsToVisit, featureMapPosition)
    end

    for _, featureMapPosition in ipairs(positionsToVisit) do
        local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
        if featureNum ~= nil and featuresToMark[featureNum] == nil then
            if isValidFlierLocation(newFigure, featureNum, false) then
                setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                featuresToMark[featureNum] = true
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showToCoCFeatureMarkers(newFigure)
    local locationMarkers = {}
    for _, cocTileSetting in ipairs(EXPANSION_BAGS['CoC'].contents['CoCStartingTiles'].contents) do
        local cocTile = getObjectFromGUID(cocTileSetting.guid)
        local xIndex, zIndex, _, _ = getFigureTileLocation(cocTile)

        local positionsToVisit = {}
        local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid))
        local specialFeatures = tileData.specialFeatures
        if specialFeatures ~= nil then
            for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                if specialFeature[3] ~= nil then
                    table.insert(positionsToVisit, specialFeatureNum+12)
                end
            end
        end
        for featureMapPosition=1, 12 do
            table.insert(positionsToVisit, featureMapPosition)
        end

        for _, featureMapPosition in ipairs(positionsToVisit) do
            local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
            if featureNum ~= nil then
                if isValidCoCLocation(newFigure, featureNum, false) then
                    setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

--show legal positions where figures from CoC can be placed
function showFromCoCFeatureMarkers(newFigure)
    local locationMarkers = {}
    local featuresToMark = table.shallow_copy(featureList)
    local positionsToVisit = {}

    if turnState == 'prompt moving from carcassonne' then
        --check the last placed tile for completed features
        local xIndex = lastPlacedTileX
        local zIndex = lastPlacedTileZ
        locationMarkers[xIndex] = {}
        locationMarkers[xIndex][zIndex] = {}

        local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid))
        local specialFeatures = tileData.specialFeatures
        if specialFeatures ~= nil then
            for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                if specialFeature[1] ~= 'Tower Foundation' and specialFeature[3] ~= nil then
                    table.insert(positionsToVisit, specialFeatureNum+12)
                end
            end
        end
        for featureMapPosition=1, 12 do
            table.insert(positionsToVisit, featureMapPosition)
        end
        for _, featureMapPosition in ipairs(positionsToVisit) do
            local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
            if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                if isValidLocationFromCoC(newFigure, featureNum, false) then
                    setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                    featuresToMark[featureNum] = nil
                end
            end
        end
        --also check neighbors for cloisters that were completed
        for _, offset in ipairs(DIAGONAL_DELTA) do
            local neighborX = lastPlacedTileX + offset.x
            local neighborZ = lastPlacedTileZ + offset.z
            if tileGridOccupied(neighborX, neighborZ) then
                local neighborTileData = getTileDataForTile(getObjectFromGUID(tileGrid[neighborX][neighborZ].tile_guid))
                local neighborSpecialFeatures = neighborTileData.specialFeatures
                if neighborSpecialFeatures ~= nil then
                    for specialFeatureNum, specialFeature in pairs(neighborSpecialFeatures) do
                        if specialFeature[1] ~= 'Tower Foundation' and specialFeature[3] ~= nil then
                            local featureMapPosition = specialFeatureNum+12
                            local featureNum = getFeatureNumAt(neighborX, neighborZ, featureMapPosition)
                            if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                                if isValidLocationFromCoC(newFigure, featureNum, false) then
                                    setOrUpdateLocationMarker(locationMarkers, neighborX, neighborZ, featureMapPosition, 0)
                                    featuresToMark[featureNum] = nil
                                end
                            end
                        end
                    end
                end
            end
        end
    elseif turnState == 'game over - prompt moving from carcassonne' then
        lastFrameTime = os.clock()
        allGameMessage(({"MESSAGE_HINTS_COC_CALCULATING"}), NEUTRAL_COLOR)

        for xIndex, tileColumn in pairs(tileGrid) do
            for zIndex, tileLocation in pairs(tileColumn) do
                local positionsToVisit = {}
                local tileData = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid))
                local specialFeatures = tileData.specialFeatures
                if specialFeatures ~= nil then
                    for specialFeatureNum, specialFeature in pairs(specialFeatures) do
                        if specialFeature[3] ~= nil then
                            table.insert(positionsToVisit, specialFeatureNum+12)
                        end
                    end
                end
                for featureMapPosition=1, 12 do
                    table.insert(positionsToVisit, featureMapPosition)
                end

                for _, featureMapPosition in ipairs(positionsToVisit) do
                    local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
                    if featureNum ~= nil and featuresToMark[featureNum] ~= nil then
                        if isValidLocationFromCoC(newFigure, featureNum, false) then
                            setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, 0)
                            featuresToMark[featureNum] = nil
                        end
                    end
                    if os.clock() - lastFrameTime > FRAME_TIME then
                        lastFrameTime = lastFrameTime + FRAME_TIME
                        coroutine.yield(0)
                    end
                    --if the turnState already changed or the figure is no longer being held by the time all of the positions have been calculated, don't show the hints
                    if turnState ~= 'game over - prompt moving from carcassonne' or newFigure.held_by_color == nil then
                        return 1
                    end
                end
            end
        end
    end

    showLocationMarkers(newFigure, locationMarkers)
    return 1
end

function showLocationMarkers(newFigure, locationMarkers)
    local hasFigureLocation = false
    for xIndex, tileColumn in pairs(locationMarkers) do
        for zIndex, tileLocation in pairs(tileColumn) do
            for featureMapPosition, numTowers in pairs(tileLocation) do
                local x = nil
                local z = nil
                if newFigure.getVar('figureName') ~= 'Barn' then
                    x, z = getFeatureLocation(xIndex, zIndex, featureMapPosition)
                else --put the marker on the corner instead of the feature position
                    if featureMapPosition % 2 == 1 then --pick one arbitrary position (assuming both were valid), then get the corner closest to it
                        local side = math.floor((featureMapPosition - 3) / 2)
                        x, z = rotateCoordinates(-0.5, 0.5, ((8 - side) % 4) + 1)
                    end
                end
                if x ~= nil and z ~= nil then
                    local tileHeight = TILE_THICKNESS

                    local specialFeatures = getTileDataForTile(getObjectFromGUID(tileGrid[xIndex][zIndex].tile_guid)).specialFeatures
                    if specialFeatures ~= nil then
                        for _, specialFeature in ipairs(specialFeatures) do
                            if specialFeature[1] == "Hill" then
                                tileHeight = TILE_THICKNESS * 2
                            end
                        end
                    end

                    local pitchRotation = 0
                    local featureNum = getFeatureNumAt(xIndex, zIndex, featureMapPosition)
                    if featureNum ~= nil then
                        local nameOfFeature = featureList[featureNum].nameOfFeature

                        if table.contains(MEEPLE_TYPES, newFigure.getVar('figureName')) and nameOfFeature == 'Field' then
                            --meeple types should lay down in fields
                            pitchRotation = 90
                        end
                    end
                    local params = {}
                    params.type = "Custom_model"
                    params.position = {(x * TILE_SPACING) + (xIndex * TILE_SPACING) - MIDDLE_OFFSET.x, TABLE_SURFACE_Y + tileHeight + numTowers * TOWER_HEIGHT, (z * TILE_SPACING) + (zIndex * TILE_SPACING) - MIDDLE_OFFSET.z}
                    params.scale = newFigure.getScale()
                    params.rotation = {pitchRotation, getPositionYawRotation(featureMapPosition, 180), 0}
                    params.callback_owner = Global
                    params.callback = "identifyFeature"
                    params.sound = false
                    local newObject = spawnObject(params)
                    table.insert(featureMarkers, newObject)
                    newObject.setCustomObject(newFigure.getCustomObject())
                    local figureColor = newFigure.getColorTint()
                    newObject.setColorTint({r=figureColor.r, g=figureColor.g, b=figureColor.b, a=FIGURE_MARKER_ALPHA})
                    hasFigureLocation = true
                end
            end
        end
    end
    --Need to wait one frame after calling setCustomObject in order to turn off the BoxCollider.
    wait(0)
    for _, featureMarker in ipairs(featureMarkers) do
        if featureMarker.getComponent("BoxCollider") ~= nil then
            featureMarker.getComponent("BoxCollider").set("enabled", false)
        end
        if featureMarker.getComponent("MeshCollider") ~= nil then
            featureMarker.getComponent("MeshCollider").set("enabled", false)
        end
    end
    if not hasFigureLocation then
        allGameMessage(({"MESSAGE_HINTS_NO_FIGURE_LOCATION"}), NEUTRAL_COLOR)
    end
end

function setOrUpdateLocationMarker(locationMarkers, xIndex, zIndex, featureMapPosition, numTowersAdded)
    if locationMarkers[xIndex] == nil then
        locationMarkers[xIndex] = {}
    end
    if locationMarkers[xIndex][zIndex] == nil then
        locationMarkers[xIndex][zIndex] = {}
    end
    if locationMarkers[xIndex][zIndex][featureMapPosition] == nil then
        locationMarkers[xIndex][zIndex][featureMapPosition] = 0
    end
    locationMarkers[xIndex][zIndex][featureMapPosition] = locationMarkers[xIndex][zIndex][featureMapPosition] + numTowersAdded
end
