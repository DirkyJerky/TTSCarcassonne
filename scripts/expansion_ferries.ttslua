--Encapsulate the behavior of the Ferries expansion (ferry)

local placedFerries = {}
local ferriesLinkedQuadrants = {}

--Player scoring data specific to expansion
function ferryInitializeAdditionalPlayerStats(player)
end

function ferryAddFerryToTile(tile, link)
    local ferry = placedFerries[tile.guid]
    local newPosition = ferryGetPosition(tile, link)
    local newRotation = ferryGetRotation(tile, link)
    if ferry ~= nil then
        getObjectFromGUID(ferry).setPositionSmooth(newPosition, false, false)
        getObjectFromGUID(ferry).setRotationSmooth(newRotation, false, false)
    else
        local ferrybag = getObjectFromGUID(EXPANSION_BAGS['Ferries'].contents['FerriesFerries'].guid)
        if ferrybag ~= nil then
            local params = {}
            params.position = newPosition
            params.rotation = newRotation
            params.callback_function = function(obj, guid) ferryLock(obj, tile.guid) end
            ferrybag.takeObject(params)
        end
    end
end

function ferryCheckTileForLake(tile)
    if controlPanelSettings['FerriesTiles'] and controlPanelSettings['FerriesFerries'] then
        local tileData = getTileDataForTile(getObjectFromGUID(tile.tile_guid))
        local specialFeatures = tileData.specialFeatures
        if specialFeatures ~= nil then
            for _, specialFeature in ipairs(specialFeatures) do
                if specialFeature[1] == 'Lake' then
                    return true
                end
            end
        end
    end
    return false
end

function ferryCheckTile(tile, side)
    if controlPanelSettings['FerriesTiles'] and controlPanelSettings['FerriesFerries'] then
        if tile ~= nil then
            local linkedQuadrants = getLinkedQuadrants(getObjectFromGUID(tile.tile_guid))
            if linkedQuadrants ~= nil then
                if linkedQuadrants[1] ~= nil then
                    if side == nil then
                        return true
                    end
                    for _, n in ipairs(linkedQuadrants[1]) do
                        if n == side then
                            return true
                        end
                    end
                end
            end
        end
    end
    return false
end

function ferryCheckMove()
    if controlPanelSettings['FerriesTiles'] and controlPanelSettings['FerriesFerries'] then
        if turnState == 'post figure events' or turnState == 'post figure events - place ferry' then
            return true
        end
    end
    return false
end


function ferrySearchSide(i)
    -- define some needed variables
    local lastPlacedTile = getObjectFromGUID(tileGrid[lastPlacedTileX][lastPlacedTileZ].tile_guid)
    local lastPlacedTileData = getTileDataForTile(lastPlacedTile)
    local sides = lastPlacedTileData.sides

    -- from the rules:
    -- If the tile placed extends more than one road,
    -- the player may move the nearest ferry on every road extended.
    if sides[i] == 'Road' then
        -- 0 start from distance = 1
        local distance = 1
        -- add the lastPlacedTile to the invalidTiles list
        invalidTiles =
        {
            {x = lastPlacedTileX, z = lastPlacedTileZ, side = 1},
            {x = lastPlacedTileX, z = lastPlacedTileZ, side = 2},
            {x = lastPlacedTileX, z = lastPlacedTileZ, side = 3},
            {x = lastPlacedTileX, z = lastPlacedTileZ, side = 4}
        }
        local connectedTiles = { {} }
        local lakeTiles = {}
        local s, x, z = getConnectingFeatureMapPosition(lastPlacedTileX, lastPlacedTileZ, i, tileGrid[lastPlacedTileX][lastPlacedTileZ].rotation)
        if tileGridOccupied(x, z) then
            s = (s + 5 - tileGrid[x][z].rotation) % 4 + 1
            local tileInfo = {x = x, z = z, side = s}
            table.insert(invalidTiles, tileInfo)
            table.insert(connectedTiles[distance], tileInfo)
            if ferryCheckTileForLake(tileGrid[x][z]) then
                if ferryCheckTile(tileGrid[x][z], s) then
                    table.insert(lakeTiles, tileInfo)
                end
            end

            -- while there are connected tiles, but no lake tiles
            while connectedTiles[distance][1] ~= nil and lakeTiles[1] == nil do
                connectedTiles[distance + 1] = {}
                -- go through all connected tiles
                for _, info in ipairs(connectedTiles[distance]) do
                    -- get the info of the previous tile
                    local tile = tileGrid[info.x][info.z]
                    local obj = getObjectFromGUID(tile.tile_guid)
                    local linkedQuadrants = getLinkedQuadrants(obj)
                    -- find if the streets connects to other tiles
                    if linkedQuadrants ~= nil then
                        for _, link in ipairs(linkedQuadrants) do
                            if table.contains(link, info.side) then
                                -- add all connected tiles to the lists
                                for _, side in ipairs(link) do
                                    if side ~= info.side then
                                        local connectedSide, connectedX, connectedZ =
                                            getConnectingFeatureMapPosition(info.x, info.z, side, tile.rotation)
                                        if tileGridOccupied(connectedX, connectedZ) then
                                            local connectedTile = tileGrid[connectedX][connectedZ]
                                            connectedSide = (connectedSide - connectedTile.rotation + 5) % 4 + 1
                                            local connectedInfo = {x = connectedX, z = connectedZ, side = connectedSide}

                                            if not table.contains(invalidTiles, connectedInfo) then
                                                if connectedTile ~= nil then
                                                    if ferryCheckTileForLake(connectedTile) then
                                                        if ferryCheckTile(connectedTile, connectedSide) then
                                                            table.insert(lakeTiles, connectedInfo)
                                                        end
                                                    end
                                                    table.insert(invalidTiles, connectedInfo)
                                                    table.insert(connectedTiles[distance + 1], connectedInfo)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                distance = distance + 1
            end
        end

        -- 4 add buttons to all tiles in lakeTiles
        if lakeTiles[1] ~= nil then
            local index = 1
            for _, lakeTile in ipairs(lakeTiles) do
                ferryDisplayButtons(lakeTile.x, lakeTile.z)
            end
            return
        end
    end
    return nextState('next')
end

function ferryLabelTileSides(tileX, tileZ, ferryTile, ferryTileObj, sides)
    local offset = {{x = 0, z = -0.625}, {x = 0.625, z = 0}, {x = 0, z = 0.625}, {x = -0.625, z = 0}}
    for side, sideType in ipairs(sides) do
        if sideType == 'Road' then
            local ferryLabelParam = {
               index = side, label = side, click_function = 'doNothing',
               position = {x=0, y=0, z=0}, width = 270, height=270, font_size = 180, color = {r = 1, g = 1, b = 0}, function_owner = nil
            }
            local normalized_x, normalized_z = rotateCoordinates(offset[side].x, offset[side].z, ferryTile.rotation)
            createNormalizedArbitraryButton({x=-tileX * TILE_SPACING + MIDDLE_OFFSET.x + normalized_x, y=ferryTileObj.getPosition().y + TILE_SURFACE_BUTTON_HEIGHT, z=tileZ * TILE_SPACING - MIDDLE_OFFSET.z + normalized_z}, ferryLabelParam, true)
        end
    end
end

function ferryGetLinkedQuadrants(guid)
    if ferriesLinkedQuadrants ~= nil then
        local t = ferriesLinkedQuadrants[guid]
        if t ~= nil then
            return t
        end
    end
    return nil
end

function ferryGetPosition(tile, link)
    local angle = {{nil, 225, 0, 315}, {nil, nil, 135, 0}, {nil, nil, nil, 45}}
    local distance = {{nil, TILE_SPACING / 10, 0, TILE_SPACING / 10}, {nil, nil, TILE_SPACING / 10, 0}, {nil, nil, nil, TILE_SPACING / 10}}
    local rotation = tile.getRotation()
    local position = tile.getPosition()
    position.x = position.x + distance[link[1]][link[2]] * math.cos(math.rad(angle[link[1]][link[2]] - rotation.y))
    position.y = position.y + TILE_THICKNESS / 2
    position.z = position.z + distance[link[1]][link[2]] * math.sin(math.rad(angle[link[1]][link[2]] - rotation.y))
    return position
end

function ferryGetRotation(tile, link)
    local angle = {{nil, 45, 90, 135}, {nil, nil, 135, 0}, {nil, nil, nil, 45}}
    local rotation = tile.getRotation()
    rotation.y = rotation.y + angle[link[1]][link[2]]
    return rotation
end

function ferryLock(obj, guid)
    obj.setLock(true)
    placedFerries[guid] = obj.guid
end

function ferryDisplayButtons(tileX, tileZ)
    if tileGridOccupied(tileX, tileZ) then
        local ferryTile = tileGrid[tileX][tileZ]
        ferryTilePosition = {x=tileX, z=tileZ}
        local ferryTileObj = getObjectFromGUID(ferryTile.tile_guid)
        local ferryTileData = getTileDataForTile(ferryTileObj)
        local offset =
        {
            {nil, {x = 0.75, z = -0.75}, {x = 0, z = -0.25}, {x = -0.75, z = -0.75}},
            {nil, nil, {x = 0.75, z = 0.75}, {x = 0, z = 0.25}},
            {nil, nil, nil, {x = -0.75, z = 0.75}}
        }
        local sides = ferryTileData.sides
        if sides ~= nil then
            ferryLabelTileSides(tileX, tileZ, ferryTile, ferryTileObj, sides)
            local i = 1
            for a = 1, 3 do
                for b = a+1, 4 do
                    if sides[a] == 'Road' and sides[b] == 'Road' then
                        local normalized_x, normalized_z
                        local x, z
                        if b - a == 2 then --button is for a ferry that crosses the middle
                            -- middle buttons are special in that rotating their position to the player could cause them to be side by side instead
                            -- instead, we want the horizontal crossing to always be at the top and the vertical crossing to be below it
                            -- to do so, we use a normalized x and z of 0 and instead rotate the coordinates ourselves in the hacky code below
                            local middleButtonRotation = 0
                            if ferryTile.rotation % 2 == 1 then --flip the orientation of the buttons if the tile is rotated, to keep the horizontal button over the vertical one
                                middleButtonRotation = 2
                            end
                            local playerRotation = player_possession_areas[activePlayers[currentPlayer]].rotation
                            if playerRotation % 2 == 0 then --orientation is correct for the side players by default, but needs to be flipped by 180 for front players
                                middleButtonRotation = middleButtonRotation + 2
                            end
                            x, z = rotateCoordinates(offset[a][b].x, offset[a][b].z, middleButtonRotation)
                            normalized_x = 0
                            normalized_z = 0
                        else
                            x = 0
                            z = 0
                            normalized_x, normalized_z = rotateCoordinates(offset[a][b].x, offset[a][b].z, ferryTile.rotation)
                        end
                        local placeFerryButtonParam =
                        {
                            index = i, label = a .. ' and ' .. b, click_function = 'ferryPlaceFerryOn' .. a .. b,
                            width = 800, height = 300, font_size = 200, function_owner = nil,
                            position =
                            {
                                x = x,
                                y = FLOATING_BUTTON_HEIGHT_LOW,
                                z = z
                            }
                        }
                        createNormalizedArbitraryButton({x=-tileX * TILE_SPACING + MIDDLE_OFFSET.x + normalized_x, y=TABLE_SURFACE_Y, z=tileZ * TILE_SPACING - MIDDLE_OFFSET.z + normalized_z}, placeFerryButtonParam, true)
                        i = i + 1
                    end
                end
            end
        end
    end
end

function ferryPlaceFerryOn(link)
    clearArbitraryButtons()
    local ferryTile = tileGrid[ferryTilePosition.x][ferryTilePosition.z]
    local ferryTileObj = getObjectFromGUID(ferryTile.tile_guid)
    if ferriesLinkedQuadrants ~= nil then
        ferriesLinkedQuadrants[ferryTile.tile_guid] = link

        local backup = {tile = lastPlacedTile, x = lastPlacedTileX, z = lastPlacedTileZ}
        removeTile(ferryTilePosition.x, ferryTilePosition.z, ferryTileObj)
        addTile(ferryTilePosition.x, ferryTilePosition.z, ferryTileObj, ferryTile.rotation, false, false)
        lastPlacedTile = backup.tile
        lastPlacedTileX = backup.x
        lastPlacedTileZ = backup.z
        ferryAddFerryToTile(ferryTileObj, link[1])
    end
    if ferryCheckMove() then
        return nextState('move ferry')
    end
    return nextState('next')
end

function ferryPlaceFerryOn12(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{1, 2}})
    end
end

function ferryPlaceFerryOn13(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{1, 3}})
    end
end

function ferryPlaceFerryOn14(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{1, 4}})
    end
end

function ferryPlaceFerryOn23(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{2, 3}})
    end
end

function ferryPlaceFerryOn24(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{2, 4}})
    end
end

function ferryPlaceFerryOn34(object, sPlayer)
    if checkGameButtonPrivileges(sPlayer) then
        ferryPlaceFerryOn({{3, 4}})
    end
end

--Restore any saved data from ferries expansion
function ferryLoadData(saved_data)
    ferriesLinkedQuadrants = saved_data.ferriesLinkedQuadrants
    placedFerries = saved_data.placedFerries
end

--Save data from ferries expansion
function ferrySaveData(saved_data)
    saved_data.ferriesLinkedQuadrants = ferriesLinkedQuadrants
    saved_data.placedFerries = placedFerries
end
